---
swagger: "2.0"
info:
  description: "Email API and SMTP relay to not just send and measure email sending,\
    \ but also alert and optimise. We provide you with tools, expertise and support\
    \ needed to reliably deliver emails to your customers inboxes on time, every time."
  version: "1.0.0"
  title: "SendPost API"
  termsOfService: "http://sendpost.io/terms-of-service"
  contact:
    email: "hello@sendpost.io"
host: "api.sendpost.io"
basePath: "/api/v1"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /account/alert/:
    get:
      tags:
      - "account/alert"
      description: "Get All Alerts"
      operationId: "AlertRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all alerts for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.DetailedAlert"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/alert"
      description: "create an alert"
      operationId: "AlertRouter.Create alert"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The List to br sent"
        required: true
        schema:
          $ref: "#/definitions/models.AlertRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Alert Created Successfully\""
          schema:
            $ref: "#/definitions/models.AlertResponse"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/alert/{alertId}:
    put:
      tags:
      - "account/alert"
      description: "Update an Alert"
      operationId: "AlertRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "alertId"
        in: "path"
        description: "The alert you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "AlertId"
      - in: "body"
        name: "body"
        description: "The alert  Settings"
        required: true
        schema:
          $ref: "#/definitions/models.EAlert"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"alert updated successfully\""
          schema:
            $ref: "#/definitions/.alert"
        "401":
          description: "Not Authorized"
        "406":
          description: ":alert is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/alert"
      description: "Delete Alert"
      operationId: "AlertRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "alertId"
        in: "path"
        description: "The AlertId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "AlertId"
      responses:
        "200":
          description: "\"Alert deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":alertId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/alert/count:
    get:
      tags:
      - "account/alert"
      description: "Count Total Alerts for account"
      operationId: "AlertRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of ips for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/domain/:
    get:
      tags:
      - "account/domain"
      description: "Get All Domains"
      operationId: "AccountDomainRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all domains for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.AccountDomain"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/domain/count:
    get:
      tags:
      - "account/domain"
      description: "Count Total Account Domains"
      operationId: "AccountDomainRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of domains for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "404":
          description: "Domain not found"
        "500":
          description: "Internal Server Error"
  /account/domainReport/reputation:
    get:
      tags:
      - "account/domainReport"
      description: "get reputation of domain"
      operationId: "DomainReportRouter.Reputation"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ip"
        in: "query"
        description: "ip"
        required: false
        type: "string"
        x-exportParamName: "Ip"
        x-optionalDataType: "String"
      - name: "host"
        in: "query"
        description: "host"
        required: false
        type: "string"
        x-exportParamName: "Host"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of ips for a specific account\""
          schema:
            $ref: "#/definitions/models.DomainCheckResult"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/domainStat/{domainName}/aggregate:
    get:
      tags:
      - "account/domainStat"
      description: "Get All Aggregate Stats"
      operationId: "DomainStatRouter.Get stats for a single domain Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "domainName"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "string"
        x-exportParamName: "DomainName"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/domainStat/{domainName}/aggregate/provider:
    get:
      tags:
      - "account/domainStat"
      description: "Get All Aggregate Stats by Group"
      operationId: "DomainStatRouter.Get All Aggregate domain Stats by Group"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "domainName"
        in: "path"
        description: "the domainName you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainName"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the group whose stats you want"
        required: true
        type: "string"
        x-exportParamName: "Provider"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/event/:
    get:
      tags:
      - "account/event"
      description: "Find all events from a account for a given time-range"
      operationId: "EventRouter.Get all events from a account for a given time-range"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "search type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "source"
        in: "query"
        description: "data source from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "sourceId"
        in: "query"
        description: "source id from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "SourceId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved All events in a given timeframe\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/{eventId}:
    get:
      tags:
      - "account/event"
      description: "Find Event By Id"
      operationId: "EventRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "eventId"
        in: "path"
        description: "the eventId that you want to retrieve"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      responses:
        "200":
          description: "\"Retrieved Event from eventId successfully\""
          schema:
            $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "406":
          description: ":eventId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/count:
    get:
      tags:
      - "account/event"
      description: "Count all events from a account for a given time-range"
      operationId: "EventRouter.Count all events from a account for a given time-range"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "search type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "source"
        in: "query"
        description: "data source from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "sourceId"
        in: "query"
        description: "source id from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "SourceId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Find count of all events of a sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/node:
    post:
      tags:
      - "account/event"
      description: "Find all events of a account from a specific node"
      operationId: "EventRouter.Get all events of a account from a specific node"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved event from eventId from a specific node successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/node/{eventId}:
    get:
      tags:
      - "account/event"
      description: "Find Event From Node by id"
      operationId: "EventRouter.Get Event In Node"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "eventId"
        in: "path"
        description: "the eventId that you want to retrieve"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      responses:
        "200":
          description: "\"Retrieved event from eventId from a specific node successfully\""
          schema:
            $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "406":
          description: ":eventId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/node/count:
    get:
      tags:
      - "account/event"
      description: "Count all events from a node of a sub-account for a given time-range"
      operationId: "EventRouter.Count all events from a node of a sub-account for\
        \ a given time-range"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "search type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "source"
        in: "query"
        description: "data source from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "sourceId"
        in: "query"
        description: "source id from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "SourceId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Find count of all events of a sub-account from a specific\
            \ node\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/node/eventType:
    get:
      tags:
      - "account/event"
      description: "Find all events from a account for a given time-range"
      operationId: "EventRouter.Get all events from an account which has only proccessed"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "type"
        in: "query"
        description: "search type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "filterEvent"
        in: "query"
        description: "filter event types"
        required: false
        type: "string"
        x-exportParamName: "FilterEvent"
        x-optionalDataType: "String"
      - name: "source"
        in: "query"
        description: "data source from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "sourceId"
        in: "query"
        description: "source id from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "SourceId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved All events in a given timeframe\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/event/node/timestampkeys:
    get:
      tags:
      - "account/event"
      description: "Find all events of a sub-account from a specific node for a give\
        \ time-range"
      operationId: "EventRouter.Get all event timestamp keys of a sub-account from\
        \ a specific node for a given time-range"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "search type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "source"
        in: "query"
        description: "data source from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "sourceId"
        in: "query"
        description: "source id from which to get timestamp keys subaccount or ip"
        required: false
        type: "string"
        x-exportParamName: "SourceId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved event from eventId from a specific node successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/incident/:
    get:
      tags:
      - "account/incident"
      description: "Get All Incidents"
      operationId: "IncidentRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "status"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Status"
        x-optionalDataType: "Int64"
      - name: "tag"
        in: "query"
        description: "status"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Tag"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "\"Retrieved all incidents for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Incident"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/incident"
      description: "Create Incident"
      operationId: "IncidentRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Incident content"
        required: true
        schema:
          $ref: "#/definitions/models.EIncident"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Incident Created Successfully\""
          schema:
            $ref: "#/definitions/models.Incident"
        "401":
          description: "Not Authorized"
        "404":
          description: "Any Related Entity if not found"
        "406":
          description: "Not Acceptable (Empty Incident Summary)"
        "422":
          description: "Unprocessable entity bad json, no authorId, not related to\
            \ anything"
        "500":
          description: "Internal Server Error"
  /account/incident/{incidentId}:
    get:
      tags:
      - "account/incident"
      description: "Find Incident by incidentId"
      operationId: "IncidentRouter.GetIncident"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "incidentId"
        in: "path"
        description: "the IncidentId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IncidentId"
      responses:
        "200":
          description: "\"Retrieved Incident from incidentId successfully\""
          schema:
            $ref: "#/definitions/models.Incident"
        "401":
          description: "Not Authorized"
        "406":
          description: ":incidentId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/incident"
      description: "Update Incident"
      operationId: "IncidentRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "incidentId"
        in: "path"
        description: "the Incident Id you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IncidentId"
      - in: "body"
        name: "body"
        description: "The Incident content"
        required: true
        schema:
          $ref: "#/definitions/models.EIncident"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Incident Updated Successfully\""
          schema:
            $ref: "#/definitions/models.Incident"
        "401":
          description: "Not Authorized"
        "406":
          description: "Not Acceptable (Empty Incident Summary)"
        "422":
          description: "Unprocessable entity bad json, no authorId, not related to\
            \ anything"
        "500":
          description: "Internal Server Error"
  /account/incident/{incidentId}/comment:
    get:
      tags:
      - "account/incident"
      description: "Get All Comments Associated with Incident"
      operationId: "IncidentRouter.GetAllComments"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "incidentId"
        in: "path"
        description: "the IncidentId you want to get comments for"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IncidentId"
      responses:
        "200":
          description: "\"Retrieved all comments for incident successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Comment"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/incident"
      description: "Add comment to Incident"
      operationId: "IncidentRouter.Add"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "incidentId"
        in: "path"
        description: "the incident id"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IncidentId"
      - in: "body"
        name: "body"
        description: "The Comment content"
        required: true
        schema:
          $ref: "#/definitions/models.EComment"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Comment Added Successfully\""
          schema:
            $ref: "#/definitions/models.Comment"
        "401":
          description: "Not Authorized"
        "406":
          description: "Not Acceptable (Empty Comment Content)"
        "422":
          description: "Unprocessable entity bad json"
        "500":
          description: "Internal Server Error"
  /account/incident/count:
    get:
      tags:
      - "account/incident"
      description: "Count Total Incidents"
      operationId: "IncidentRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "status"
        in: "query"
        description: "status"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Status"
        x-optionalDataType: "Int64"
      - name: "tag"
        in: "query"
        description: "status"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Tag"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of incidents for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/integration/:
    get:
      tags:
      - "account/integration"
      description: "Get All Integrations"
      operationId: "AccountIntegrationRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved all integrations for account successful\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Integration"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/integration/{itype}:
    post:
      tags:
      - "account/integration"
      description: "Create Integration"
      operationId: "AccountIntegrationRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "itype"
        in: "path"
        description: "The integration type you want to create"
        required: true
        type: "string"
        x-exportParamName: "Itype"
      - in: "body"
        name: "body"
        description: "The Integration content"
        required: true
        schema:
          $ref: "#/definitions/models.EIntegration"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Integration Created Successfully\""
          schema:
            $ref: "#/definitions/models.Integration"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/integration"
      description: "Update Integration"
      operationId: "AccountIntegrationRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "itype"
        in: "path"
        description: "The integration type you want to update"
        required: true
        type: "string"
        x-exportParamName: "Itype"
      - in: "body"
        name: "body"
        description: "The Integration content"
        required: true
        schema:
          $ref: "#/definitions/models.EIntegration"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Integration updated successfully\""
          schema:
            $ref: "#/definitions/models.Integration"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/integration"
      description: "Delete Integration"
      operationId: "AccountIntegrationRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "itype"
        in: "path"
        description: "The integration type you want to update"
        required: true
        type: "string"
        x-exportParamName: "Itype"
      responses:
        "200":
          description: "\"Integration deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "404":
          description: "Integration Not Found"
        "500":
          description: "Internal Server Error"
  /account/integration/count:
    get:
      tags:
      - "account/integration"
      description: "Count Total AccountIntegrations"
      operationId: "AccountIntegrationRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Total count of integrations for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/integration/glockapps/monitor/{ipid}:
    post:
      tags:
      - "account/integration"
      description: "Enable IP Monitoring for a single IP"
      operationId: "AccountIntegrationRouter.EnableGlockappsIPMonitoring"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to enable monitoring for"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"IP Enabled for monitoring (hits GA as well)\""
          schema:
            $ref: "#/definitions/models.Response"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/integration"
      description: "Disable IP Monitoring for a single IP"
      operationId: "AccountIntegrationRouter.DisableGlockappsIPMonitoring"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to disable monitoring for"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"IP Disabled for monitoring (hits GA as well - even if that\
            \ fails Sendpost definitely stops monitoring it)\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/integration/glockapps/monitor/stat/{ipid}:
    get:
      tags:
      - "account/integration"
      description: "Get Monitored IP Stats"
      operationId: "AccountIntegrationRouter.Get Monitored IP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId for which you want monitored stats"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.RGlockappsMonitorStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/invitation/:
    get:
      tags:
      - "account/invitation"
      description: "Get All Invitations"
      operationId: "InvitationRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved all invitations for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Invitation"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/invitation"
      description: "Create Invitation"
      operationId: "InvitationRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Invitation content"
        required: true
        schema:
          $ref: "#/definitions/models.EInvitation"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Invitation Created Successfully\""
          schema:
            $ref: "#/definitions/models.Invitation"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/invitation/{invitationId}:
    delete:
      tags:
      - "account/invitation"
      description: "Delete Invitation"
      operationId: "InvitationRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "invitationId"
        in: "path"
        description: "The InvitationId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "InvitationId"
      responses:
        "200":
          description: "\"Invitation deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":invitationId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/ip/:
    get:
      tags:
      - "account/ip"
      description: "Get All IPs"
      operationId: "IPRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "filterBy"
        in: "query"
        description: "filterBy"
        required: false
        type: "string"
        x-exportParamName: "FilterBy"
        x-optionalDataType: "String"
      - name: "filterValue"
        in: "query"
        description: "filterValue"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "FilterValue"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all ips for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.IP"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/{ipid}:
    get:
      tags:
      - "account/ip"
      description: "Find IP by IPId"
      operationId: "IPRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"Retrieved IP from ipid successfully\""
          schema:
            $ref: "#/definitions/models.IP"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ipid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/ip"
      description: "Update an IP"
      operationId: "IPRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "The IP you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - in: "body"
        name: "body"
        description: "The IP Email Provider Settings"
        required: true
        schema:
          $ref: "#/definitions/models.IIP"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"IP updated successfully\""
          schema:
            $ref: "#/definitions/models.IP"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ipid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/ip"
      description: "Delete IP"
      operationId: "IPRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "The IPId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"IP deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ipid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/ip/{ipid}/incident:
    get:
      tags:
      - "account/ip"
      description: "Get All Incidents associated with a IP"
      operationId: "IPRouter.GetAll IP Incidents"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "The ipid whose incidents you want to retrieve"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"Retrieved all incidents for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Incident"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/allocate:
    post:
      tags:
      - "account/ip"
      description: "Allocate IP To Account"
      operationId: "IPRouter.Allocate IP"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Allocated IP for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.IP"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/count:
    get:
      tags:
      - "account/ip"
      description: "Count Total AccountIPs"
      operationId: "IPRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "filterBy"
        in: "query"
        description: "filterBy"
        required: false
        type: "string"
        x-exportParamName: "FilterBy"
        x-optionalDataType: "String"
      - name: "filterValue"
        in: "query"
        description: "filterValue"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "FilterValue"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of ips for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/stat/{ipid}:
    get:
      tags:
      - "account/ip/stat"
      description: "Get All IP Stats"
      operationId: "IPStatRouter.Get All IP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.RIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/stat/{ipid}/aggregate:
    get:
      tags:
      - "account/ip/stat"
      description: "Get All Aggregate Stats"
      operationId: "IPStatRouter.Get All Aggregate IP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/stat/{ipid}/aggregate/provider:
    get:
      tags:
      - "account/ip/stat"
      description: "Get All Aggregate Stats by Provider"
      operationId: "IPStatRouter.Get All Aggregate IP Stats by Provider"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/stat/{ipid}/aggregate/providers:
    get:
      tags:
      - "account/ip/stat"
      description: "Get All Aggregated Provider Stats for a IP"
      operationId: "IPStatRouter.Get All Aggregated Provider Stats for a IP"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.PIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/stat/{ipid}/aggregate/sid/{sid}/providers:
    get:
      tags:
      - "account/ip/stat"
      description: "Get All Aggregated Provider Stats for a Specific Sub-Account of\
        \ a IP"
      operationId: "IPStatRouter.Get All Aggregated Provider Stats for a Specific\
        \ Sub-Account of a IP"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "sid"
        in: "path"
        description: "the Sub Account Id you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Sid"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.PIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ip/stat/{ipid}/aggregate/subaccounts:
    get:
      tags:
      - "account/ip/stat"
      description: "Get All Aggregated Sub-Account Stats for an IP"
      operationId: "IPStatRouter.Get All Aggregated Sub-Account Stats for an IP"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      - name: "sortBy"
        in: "query"
        description: "the sorting order"
        required: false
        type: "string"
        x-exportParamName: "SortBy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/ippool/:
    get:
      tags:
      - "account/ippool"
      description: "Get All AccountIPPools"
      operationId: "AccountIPPoolRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all ippools for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.AccountIPPool"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/ippool"
      description: "Create AccountIPPool"
      operationId: "AccountIPPoolRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The AccountIPPool content"
        required: true
        schema:
          $ref: "#/definitions/models.EIPPool"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"AccountIPPool Created Successfully\""
          schema:
            $ref: "#/definitions/models.AccountIPPool"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/ippool/{ippoolid}:
    get:
      tags:
      - "account/ippool"
      description: "Find AccountIPPool by AccountIPPoolId"
      operationId: "AccountIPPoolRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ippoolid"
        in: "path"
        description: "the AccountIPPoolId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ippoolid"
      responses:
        "200":
          description: "\"Retrieved AccountIPPool from ippoolid successfully\""
          schema:
            $ref: "#/definitions/models.AccountIPPool"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ippoolid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/ippool"
      description: "Update AccountIPPool"
      operationId: "AccountIPPoolRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ippoolid"
        in: "path"
        description: "The AccountIPPoolId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ippoolid"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.EIPPool"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated AccountIPPool successfully\""
          schema:
            $ref: "#/definitions/models.AccountIPPool"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ippoolid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/ippool"
      description: "Delete AccountIPPool"
      operationId: "AccountIPPoolRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ippoolid"
        in: "path"
        description: "The AccountIPPoolId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ippoolid"
      responses:
        "200":
          description: "\"AccountIPPool deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ippoolid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/ippool/count:
    get:
      tags:
      - "account/ippool"
      description: "Count Total AccountIPPools"
      operationId: "AccountIPPoolRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Total count of ippools for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/label/:
    get:
      tags:
      - "account/label"
      description: "Get All Labels"
      operationId: "LabelRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "type"
        in: "query"
        description: "get all labels type"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      responses:
        "200":
          description: "\"Retrieved all labels for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Label"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/label"
      description: "Create Label"
      operationId: "LabelRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Label content"
        required: true
        schema:
          $ref: "#/definitions/models.Label"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Label Created Successfully\""
          schema:
            $ref: "#/definitions/models.Label"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/label/{labelId}:
    get:
      tags:
      - "account/label"
      description: "Find Label by LabelId"
      operationId: "LabelRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "labelId"
        in: "path"
        description: "the LabelId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      responses:
        "200":
          description: "\"Retrieved Label from labelId successfully\""
          schema:
            $ref: "#/definitions/models.Label"
        "401":
          description: "Not Authorized"
        "406":
          description: ":labelId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/label"
      description: "Update Label"
      operationId: "LabelRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "labelId"
        in: "path"
        description: "The LabelId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.Label"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated Label successfully\""
          schema:
            $ref: "#/definitions/models.Label"
        "401":
          description: "Not Authorized"
        "406":
          description: ":labelId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/label"
      description: "Delete Label"
      operationId: "LabelRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "labelId"
        in: "path"
        description: "The LabelId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "LabelId"
      responses:
        "200":
          description: "\"Label deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":labelId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/label/count:
    get:
      tags:
      - "account/label"
      description: "Count Total Labels"
      operationId: "LabelRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "type"
        in: "query"
        description: "get all labels type"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      responses:
        "200":
          description: "\"Total count of subaccounts for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/mailReport/:
    post:
      tags:
      - "account/mailReport"
      description: "get reputation of domain"
      operationId: "MailReportRouter.MailReport"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The IP Email Provider Settings"
        required: true
        schema:
          $ref: "#/definitions/models.CreateMailReport"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Total count of ips for a specific account\""
          schema:
            $ref: "#/definitions/models.MailReportResult"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/mailReport/{reportId}:
    get:
      tags:
      - "account/mailReport"
      description: "get Providers available"
      operationId: "MailReportRouter.MailReport Get single report"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "reportId"
        in: "path"
        description: "the report id you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ReportId"
      responses:
        "200":
          description: "\"Total count of ips for a specific account\""
          schema:
            $ref: "#/definitions/api.GlockappsMailReport"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/mailReport/provider:
    get:
      tags:
      - "account/mailReport"
      description: "get Providers available"
      operationId: "MailReportRouter.MailReport Providers"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Total count of ips for a specific account\""
          schema:
            $ref: "#/definitions/models.ProviderResult"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/member/:
    get:
      tags:
      - "account/member"
      description: "Get All Members"
      operationId: "MemberRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved all members for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Member"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/member/{memberId}:
    get:
      tags:
      - "account/member"
      description: "Find Member by MemberId"
      operationId: "MemberRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "memberId"
        in: "path"
        description: "the MemberId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "MemberId"
      responses:
        "200":
          description: "\"Retrieved Member from memberId successfully\""
          schema:
            $ref: "#/definitions/models.Member"
        "401":
          description: "Not Authorized"
        "406":
          description: ":memberId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/member"
      description: "Update Member"
      operationId: "MemberRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "memberId"
        in: "path"
        description: "The MemberId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "MemberId"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.EMember"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated Member successfully\""
          schema:
            $ref: "#/definitions/models.Member"
        "401":
          description: "Not Authorized"
        "406":
          description: ":memberId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/member"
      description: "Delete Member"
      operationId: "MemberRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "memberId"
        in: "path"
        description: "The MemberId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "MemberId"
      responses:
        "200":
          description: "\"Member deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":memberId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/member/{memberId}/verify/email:
    post:
      tags:
      - "account/member"
      description: "Verify Member By Email Request"
      operationId: "MemberRouter.Verify By Email Request"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "memberId"
        in: "path"
        description: "the MemberId who is inviting new member to join the account"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "MemberId"
      - in: "body"
        name: "body"
        description: "The Email to be used to verify"
        required: true
        schema:
          $ref: "#/definitions/models.VerifyByMemberTokenRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success Email Verification Link sent"
        "400":
          description: "Bad Request Email and Member don't match or not"
        "401":
          description: "Not Authorized"
        "403":
          description: "Forbidden Already verified"
        "406":
          description: ":memberId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/message/{messageId}:
    get:
      tags:
      - "account/message"
      description: "Find Message By Id"
      operationId: "MessageRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "messageId"
        in: "path"
        description: "the messageId that you want to retrieve"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      responses:
        "200":
          description: "\"Retrieved Message from MessageStore\""
          schema:
            $ref: "#/definitions/models.QEmailMessage"
        "401":
          description: "Not Authorized"
        "404":
          description: "Message not found"
        "406":
          description: ":messageId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/message/{messageId}/events:
    get:
      tags:
      - "account/message"
      description: "Find all events associated with a message id"
      operationId: "MessageRouter.Get all events for a message id"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "messageId"
        in: "path"
        description: "the messageId that you want to retrieve"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      responses:
        "200":
          description: "\"Retrieved events for a message id\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "406":
          description: ":messageId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/message/node/{messageId}:
    get:
      tags:
      - "account/message"
      description: "Find Message from node by specific Id"
      operationId: "MessageRouter.Get message from node"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "messageId"
        in: "path"
        description: "the messageId that you want to retrieve"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      responses:
        "200":
          description: "\"Retrieved Message from Message Store from a specific node\""
          schema:
            $ref: "#/definitions/models.QEmailMessage"
        "401":
          description: "Not Authorized"
        "404":
          description: "Message not found"
        "406":
          description: ":messageId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/message/node/{messageId}/events:
    get:
      tags:
      - "account/message"
      description: "Find all message events associated with a message id from a specific\
        \ node"
      operationId: "MessageRouter.Get all events for a message id from a node"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "messageId"
        in: "path"
        description: "the messageId that you want to retrieve"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      responses:
        "200":
          description: "\"Retrieved events for a message id\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEvent"
        "401":
          description: "Not Authorized"
        "406":
          description: ":messageId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/onboarding/checklist:
    get:
      tags:
      - "account/onboarding"
      description: "Gets Onboarding Checklist data for account if not present creates\
        \ a default entry"
      operationId: "OnboardingRouter.Get Onboarding Checklist"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved checklist for account successfully\""
          schema:
            $ref: "#/definitions/models.OnboardingChecklist"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/payment/customer/coupon:
    post:
      tags:
      - "account/payment"
      description: "Apply Coupon to Stripe Customer"
      operationId: "PaymentRouter.Apply Coupon to Stripe Customer"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "Coupon Code Options"
        required: true
        schema:
          $ref: "#/definitions/models.CouponOptions"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successfully applied coupon"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/payment/portal:
    post:
      tags:
      - "account/payment"
      description: "Create Customer Portal for account"
      operationId: "PaymentRouter.Create Customer Portal"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved stripe billing portal session\""
          schema:
            $ref: "#/definitions/models.BillingPortalSession"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/payment/subscription:
    post:
      tags:
      - "account/payment"
      description: "Create Payment Subscription for Stripe"
      operationId: "PaymentRouter.Create Payment Subscription"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "PaymentOptions content"
        required: true
        schema:
          $ref: "#/definitions/models.PaymentOptions"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Return state of payment\""
          schema:
            $ref: "#/definitions/models.PaymentStatus"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/payment/webhook:
    post:
      tags:
      - "account/payment"
      description: "Handle Payment Related Webhooks"
      operationId: "PaymentRouter.Handle Payment Webhook"
      parameters: []
      responses:
        "200":
          description: "Successfully handled webhook"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/recipient/{recipient}/messages:
    get:
      tags:
      - "account/recipient"
      description: "Find all messages sent to a specific recipient"
      operationId: "RecipientRouter.Get all messages for a recipient"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "recipient"
        in: "path"
        description: "email of the recipient"
        required: true
        type: "string"
        x-exportParamName: "Recipient"
      responses:
        "200":
          description: "\"Retrieved messages for a specific recipient\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEmailMessage"
        "401":
          description: "Not Authorized"
        "406":
          description: ":recipient is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/recipient/node/{recipient}/messages:
    get:
      tags:
      - "account/recipient"
      description: "Find all message sent to a recipient from a specific node"
      operationId: "RecipientRouter.Get all messages for a recipient from a node"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "recipient"
        in: "path"
        description: "email of the recipient"
        required: true
        type: "string"
        x-exportParamName: "Recipient"
      responses:
        "200":
          description: "\"Retrieved messages for a specific recipient\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.QEmailMessage"
        "401":
          description: "Not Authorized"
        "406":
          description: ":recipient is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/setting/:
    put:
      tags:
      - "account/setting"
      description: "update account settings"
      operationId: "AccountSettingRouter.update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The account settings to be updated"
        required: true
        schema:
          $ref: "#/definitions/models.EAccountSetting"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Account updated successfully\""
          schema:
            $ref: "#/definitions/models.Account"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"
  /account/smtp/stat/ip/{ipid}/aggregate:
    get:
      tags:
      - "account/smtp/stat"
      description: "Get All Aggregate IP SMTP Stats"
      operationId: "SMTPStatRouter.Get All Aggregate IP SMTP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SMTPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/smtp/stat/ip/{ipid}/provider/{provider}/aggregate:
    get:
      tags:
      - "account/smtp/stat"
      description: "Get All Aggregate IP Provider SMTP Stats"
      operationId: "SMTPStatRouter.Get All Aggregate IP Provider SMTP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IP ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "provider"
        in: "path"
        description: "the provider name"
        required: true
        type: "string"
        x-exportParamName: "Provider"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SMTPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/smtp/stat/ip/{ipid}/subaccount/{sid}/aggregate:
    get:
      tags:
      - "account/smtp/stat"
      description: "Get All Aggregate IP SMTP Stats For SubAccount"
      operationId: "SMTPStatRouter.Get All Aggregate IP SMTP Stats For SubAccount"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "ipid"
        in: "path"
        description: "the IP ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "sid"
        in: "path"
        description: "the SubAccount ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Sid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SMTPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/smtp/stat/subaccount/{sid}/aggregate:
    get:
      tags:
      - "account/smtp/stat"
      description: "Get All Aggregate SubAccount SMTP Stats"
      operationId: "SMTPStatRouter.Get All Aggregate SubAccount SMTP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "sid"
        in: "path"
        description: "the Sub-Account ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Sid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SMTPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/smtp/stat/subaccount/{sid}/ip/{ipid}/aggregate:
    get:
      tags:
      - "account/smtp/stat"
      description: "Get All Aggregate SubAccount SMTP Stats For IP"
      operationId: "SMTPStatRouter.Get All Aggregate SubAccount SMTP Stats For IP"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "sid"
        in: "path"
        description: "the Sub-Account ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Sid"
      - name: "ipid"
        in: "path"
        description: "the IP  ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "provider"
        in: "query"
        description: "the provider whose stats you want"
        required: false
        type: "string"
        x-exportParamName: "Provider"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SMTPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/smtp/stat/subaccount/{sid}/provider/{provider}/aggregate:
    get:
      tags:
      - "account/smtp/stat"
      description: "Get All Aggregate SubAccount Provider SMTP Stats"
      operationId: "SMTPStatRouter.Get All Aggregate SubAccount Provider SMTP Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "sid"
        in: "path"
        description: "the SubAccount ID you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Sid"
      - name: "provider"
        in: "path"
        description: "the provider name"
        required: true
        type: "string"
        x-exportParamName: "Provider"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SMTPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/stat/:
    get:
      tags:
      - "account/stat"
      description: "Get All Account Stats"
      operationId: "AccountStatRouter.Get All Account Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.RStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/stat/aggregate:
    get:
      tags:
      - "account/stat"
      description: "Get All Aggregate Stats"
      operationId: "AccountStatRouter.Get All Aggregate Account Stats"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/stat/aggregate/group:
    get:
      tags:
      - "account/stat"
      description: "Get All Aggregate Stats by Group"
      operationId: "AccountStatRouter.Get All Aggregate Account Stats by Group"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        description: "the group whose stats you want"
        required: true
        type: "string"
        x-exportParamName: "Group"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/stat/group:
    get:
      tags:
      - "account/stat"
      description: "Get All Account Stats by Group"
      operationId: "AccountStatRouter.Get All Account Stats by Group"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        description: "the group whose stats you want"
        required: true
        type: "string"
        x-exportParamName: "Group"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.RStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/subaccount/:
    get:
      tags:
      - "account/subaccount"
      description: "Get All SubAccounts"
      operationId: "SubAccountRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "filterBy"
        in: "query"
        description: "filterBy"
        required: false
        type: "string"
        x-exportParamName: "FilterBy"
        x-optionalDataType: "String"
      - name: "filterValue"
        in: "query"
        description: "filterValue"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "FilterValue"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all subAccounts for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SubAccount"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/subaccount"
      description: "Create SubAccount"
      operationId: "SubAccountRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The SubAccount content"
        required: true
        schema:
          $ref: "#/definitions/models.ESubAccount"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"SubAccount Created Successfully\""
          schema:
            $ref: "#/definitions/models.SubAccount"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/subaccount/{subAccountId}:
    get:
      tags:
      - "account/subaccount"
      description: "Find SubAccount by SubAccountId"
      operationId: "SubAccountRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "subAccountId"
        in: "path"
        description: "the SubAccountId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      responses:
        "200":
          description: "\"Retrieved SubAccount from subAccountId successfully\""
          schema:
            $ref: "#/definitions/models.SubAccount"
        "401":
          description: "Not Authorized"
        "406":
          description: ":subAccountId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/subaccount"
      description: "Update SubAccount"
      operationId: "SubAccountRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "subAccountId"
        in: "path"
        description: "The SubAccountId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.ESubAccount"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated SubAccount successfully\""
          schema:
            $ref: "#/definitions/models.SubAccount"
        "401":
          description: "Not Authorized"
        "406":
          description: ":subAccountId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/subaccount"
      description: "Delete SubAccount"
      operationId: "SubAccountRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "subAccountId"
        in: "path"
        description: "The SubAccountId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      responses:
        "200":
          description: "\"SubAccount deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":subAccountId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/subaccount/{subAccountId}/incident:
    get:
      tags:
      - "account/subaccount"
      description: "Get All Incidents associated with a sub-account"
      operationId: "SubAccountRouter.GetAll SubAccount Incidents"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "subAccountId"
        in: "path"
        description: "The SubAccountId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      responses:
        "200":
          description: "\"Retrieved all incidents for account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Incident"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/subaccount/count:
    get:
      tags:
      - "account/subaccount"
      description: "Count Total Subaccounts"
      operationId: "SubAccountRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "filterBy"
        in: "query"
        description: "filterBy"
        required: false
        type: "string"
        x-exportParamName: "FilterBy"
        x-optionalDataType: "String"
      - name: "filterValue"
        in: "query"
        description: "filterValue"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "FilterValue"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of subaccounts for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/tag/:
    get:
      tags:
      - "account/tag"
      description: "Get All Tags"
      operationId: "TagRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Retrieved all tags for account successful\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Tag"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/tag"
      description: "Create Tag"
      operationId: "TagRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Tag content"
        required: true
        schema:
          $ref: "#/definitions/models.Tag"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Tag Created Successfully\""
          schema:
            $ref: "#/definitions/models.Tag"
        "401":
          description: "Not Authorized"
        "406":
          description: "Not Acceptable e.g. Color not right, MinLength not satisfied"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/tag/{tagid}:
    delete:
      tags:
      - "account/tag"
      description: "Delete Tag"
      operationId: "TagRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "tagid"
        in: "path"
        description: "The AccountTagId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Tagid"
      responses:
        "200":
          description: "\"Tag deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":tagid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/template/:
    get:
      tags:
      - "account/template"
      description: "Get all templates"
      operationId: "AccountTemplateRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"All Templates data received successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.AccountTemplate"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/template"
      description: "Create a new template"
      operationId: "AccountTemplateRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The AccountTemplate content"
        required: true
        schema:
          $ref: "#/definitions/models.AccountTemplate"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"AccountTemplate Created Successfully\""
          schema:
            $ref: "#/definitions/models.AccountTemplate"
        "400":
          description: "Bad Request"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/template/{templateid}:
    get:
      tags:
      - "account/template"
      description: "Get single template"
      operationId: "AccountTemplateRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "templateid"
        in: "path"
        description: "ID of the template required"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Templateid"
      responses:
        "200":
          description: "\"AccountTemplate data received successfully from templateid\""
          schema:
            $ref: "#/definitions/models.AccountTemplate"
        "401":
          description: "Not Authorized"
        "404":
          description: "AccountTemplate Not Found"
    put:
      tags:
      - "account/template"
      description: "update template"
      operationId: "AccountTemplateRouter.update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "templateid"
        in: "path"
        description: "The id of the template you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Templateid"
      - in: "body"
        name: "body"
        description: "The template content"
        required: true
        schema:
          $ref: "#/definitions/models.AccountTemplate"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"AccountTemplate updated successfully\""
          schema:
            $ref: "#/definitions/models.AccountTemplate"
        "401":
          description: "Unauthorized"
        "404":
          description: "AccountTemplate Not Found"
        "500":
          description: "Internal server error"
    delete:
      tags:
      - "account/template"
      description: "Delete AccountTemplate"
      operationId: "AccountTemplateRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "templateid"
        in: "path"
        description: "The id of the template you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Templateid"
      responses:
        "200":
          description: "\"AccountTemplate deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "404":
          description: "AccountTemplate Not Found"
        "500":
          description: "Internal Server Error"
  /account/template/{templateid}/copy:
    post:
      tags:
      - "account/template"
      description: "Copy AccountTemplate"
      operationId: "AccountTemplateRouter.Copy"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "templateid"
        in: "path"
        description: "The id of the template you want to copy"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Templateid"
      responses:
        "200":
          description: "\"AccountTemplate copied successfully\""
          schema:
            $ref: "#/definitions/models.AccountTemplate"
        "401":
          description: "Not Authorized"
        "404":
          description: "AccountTemplate Not Found"
        "500":
          description: "Internal Server Error"
  /account/template/count:
    get:
      tags:
      - "account/template"
      description: "Count total templates"
      operationId: "AccountTemplateRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of ippools for a specific account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/validation/:
    get:
      tags:
      - "account/validation"
      description: "Get all validation"
      operationId: "ValidationRouter.Get All"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Validations retrieved successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Validation"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/validation"
      description: "Validate Email List Synchronously"
      operationId: "ValidationRouter.Validate Email List"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The email list to be sent for being validated"
        required: true
        schema:
          $ref: "#/definitions/models.EmailList"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Cleaned list\""
          schema:
            $ref: "#/definitions/models.CleanedList"
        "401":
          description: "Not Authorized"
        "406":
          description: "Request body is not acceptable owing to it exceeding email\
            \ list size in request body"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/validation"
      description: "Delete a specific validation"
      operationId: "ValidationRouter.Delete Validation"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "List of emails to be deleted from validation"
        required: true
        schema:
          $ref: "#/definitions/models.EValidation"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Validations have been deleted successfully\""
          schema:
            $ref: "#/definitions/models.Validation"
        "401":
          description: "Not Authorized"
        "406":
          description: "suppression list is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/validation/bulk:
    post:
      tags:
      - "account/validation"
      description: "Validate Emails In File Asynchronously"
      operationId: "ValidateRouter.Validate Email Bulk"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "fileinput"
        in: "formData"
        description: "CSV whose emails need to be validated"
        required: true
        type: "file"
        x-exportParamName: "Fileinput"
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Cleaned list\""
          schema:
            $ref: "#/definitions/models.BulkResponse"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/validation/count:
    get:
      tags:
      - "account/validation"
      description: "Count Total Validations"
      operationId: "ValidationRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Total count of domains for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /account/webhook/:
    get:
      tags:
      - "account/webhook"
      description: "Get All AccountWebhooks"
      operationId: "AccountWebhookRouter.GetAll"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all whooks for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.AccountWebhook"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "account/webhook"
      description: "Create AccountWebhook"
      operationId: "AccountWebhookRouter.Create"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - in: "body"
        name: "body"
        description: "The AccountWebhook content"
        required: true
        schema:
          $ref: "#/definitions/models.EWebhook"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"AccountWebhook Created Successfully\""
          schema:
            $ref: "#/definitions/models.AccountWebhook"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/webhook/{webhookId}:
    get:
      tags:
      - "account/webhook"
      description: "Find AccountWebhook by AccountWebhookId"
      operationId: "AccountWebhookRouter.Get"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "webhookId"
        in: "path"
        description: "the AccountWebhookId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "WebhookId"
      responses:
        "200":
          description: "\"Retrieved AccountWebhook from webhookId successfully\""
          schema:
            $ref: "#/definitions/models.AccountWebhook"
        "401":
          description: "Not Authorized"
        "406":
          description: ":webhookId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "account/webhook"
      description: "Update AccountWebhook"
      operationId: "AccountWebhookRouter.Update"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "webhookId"
        in: "path"
        description: "The AccountWebhookId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "WebhookId"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.EWebhook"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated AccountWebhook successfully\""
          schema:
            $ref: "#/definitions/models.AccountWebhook"
        "401":
          description: "Not Authorized"
        "406":
          description: ":webhookId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "account/webhook"
      description: "Delete AccountWebhook"
      operationId: "AccountWebhookRouter.Delete"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      - name: "webhookId"
        in: "path"
        description: "The AccountWebhookId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "WebhookId"
      responses:
        "200":
          description: "\"AccountWebhook deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":webhookId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /account/webhook/count:
    get:
      tags:
      - "account/webhook"
      description: "Count Total AccountWebhooks"
      operationId: "AccountWebhookRouter.Count"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Total count of domains for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /auth/create:
    post:
      tags:
      - "auth"
      description: "Create Account, sub-account and member"
      operationId: "AuthRouter.Create"
      parameters:
      - in: "body"
        name: "body"
        description: "The Account content"
        required: true
        schema:
          $ref: "#/definitions/models.EAccount"
        x-exportParamName: "Body"
      - name: "X-Token"
        in: "header"
        description: "Firebase dynamic token"
        required: true
        type: "string"
        x-exportParamName: "XToken"
      responses:
        "200":
          description: "\"Account, sub-account and member created successfully\""
          schema:
            $ref: "#/definitions/models.Account"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /auth/info:
    post:
      tags:
      - "auth"
      description: "Get Auth Info Details"
      operationId: "AuthRouter.Get Auth Info"
      parameters:
      - in: "body"
        name: "body"
        description: "The Account content"
        required: true
        schema:
          $ref: "#/definitions/models.EAccount"
        x-exportParamName: "Body"
      - name: "X-Token"
        in: "header"
        description: "Firebase dynamic token"
        required: true
        type: "string"
        x-exportParamName: "XToken"
      responses:
        "200":
          description: "\"Get auth info details\""
          schema:
            $ref: "#/definitions/models.AuthInfo"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "auth"
      description: "Updates member and accounts related for email verification and\
        \ on boarding answers"
      operationId: "AuthRouter.Update Auth Info"
      parameters:
      - in: "body"
        name: "body"
        description: "The Account Member content"
        required: true
        schema:
          $ref: "#/definitions/models.EAccountMember"
        x-exportParamName: "Body"
      - name: "X-Token"
        in: "header"
        description: "Firebase dynamic token"
        required: true
        type: "string"
        x-exportParamName: "XToken"
      responses:
        "200":
          description: "\"Updated Auth info\""
          schema:
            $ref: "#/definitions/models.AuthInfo"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /cluster/cache:
    get:
      tags:
      - "cluster"
      description: "Get item from cache of every node in cluster"
      operationId: "ClusterRouter.Get item from cache of every node in cluster"
      parameters:
      - name: "X-System-ApiKey"
        in: "header"
        description: "System API Key"
        required: true
        type: "string"
        x-exportParamName: "XSystemApiKey"
      - name: "name"
        in: "query"
        description: "cache name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "key"
        in: "query"
        description: "cache item key to delete"
        required: false
        type: "string"
        x-exportParamName: "Key"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Got all Items in cache\""
          schema:
            $ref: "#/definitions/models.AllClusterCache"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "cluster"
      description: "Delete item from cache of every node in cluster"
      operationId: "ClusterRouter.Delete item from cache of every node in cluster"
      parameters:
      - name: "X-System-ApiKey"
        in: "header"
        description: "System API Key"
        required: true
        type: "string"
        x-exportParamName: "XSystemApiKey"
      - name: "name"
        in: "query"
        description: "cache name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "key"
        in: "query"
        description: "cache item key to delete"
        required: false
        type: "string"
        x-exportParamName: "Key"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Removed item from cache of every node of cluster successfully\""
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /cluster/cache/node:
    get:
      tags:
      - "cluster"
      description: "Delete item from cache of specific node in cluster"
      operationId: "ClusterRouter.Get  item from cache of specific node in cluster"
      parameters:
      - name: "X-System-ApiKey"
        in: "header"
        description: "System API Key"
        required: true
        type: "string"
        x-exportParamName: "XSystemApiKey"
      - name: "name"
        in: "query"
        description: "cache name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "key"
        in: "query"
        description: "cache item key to delete"
        required: false
        type: "string"
        x-exportParamName: "Key"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Got item from cluster cache\""
          schema:
            $ref: "#/definitions/models.ClusterCache"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "cluster"
      description: "Get item from cache of specific node in cluster"
      operationId: "ClusterRouter.Get item from cache of specific node in cluster"
      parameters:
      - name: "X-System-ApiKey"
        in: "header"
        description: "System API Key"
        required: true
        type: "string"
        x-exportParamName: "XSystemApiKey"
      - name: "name"
        in: "query"
        description: "cache name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "key"
        in: "query"
        description: "cache item key to delete"
        required: false
        type: "string"
        x-exportParamName: "Key"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Removed item from cache of specific node of cluster successfully\""
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /cluster/suppression/filter:
    post:
      tags:
      - "cluster"
      description: "Add items to suppression filter of every node in cluster"
      operationId: "ClusterRouter.Add items to suppression filter of every node in\
        \ cluster"
      parameters:
      - in: "body"
        name: "body"
        description: "Add suppressions to suppression filter"
        required: true
        schema:
          $ref: "#/definitions/models.Suppression"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Added items to suppression cache of every node of cluster\
            \ successfully\""
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "cluster"
      description: "Delete items from suppression filter of every node in cluster"
      operationId: "ClusterRouter.Delete items from suppression filter of every node\
        \ in cluster"
      parameters:
      - in: "body"
        name: "body"
        description: "Delete suppressions from suppression filter"
        required: true
        schema:
          $ref: "#/definitions/models.Suppression"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Removed items from suppression cache of every node of cluster\
            \ successfully\""
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /editor/:
    get:
      tags:
      - "editor"
      description: "fetch Bee editor token"
      operationId: "EditorApiRouter.GetToken"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"Bee editor token received\""
          schema:
            $ref: "#/definitions/models.EditorTokenResponse"
        "401":
          description: "Not Authorized"
        "422":
          description: "Bee editor API response body is not in proper format"
        "503":
          description: "Bee editor API unavailable"
  /smtp/webhook:
    post:
      tags:
      - "smtp"
      description: "Receive webhooks raised from SMTP servers"
      operationId: "SMTPRouter.Receive webhooks raised from SMTP servers"
      parameters:
      - in: "body"
        name: "body"
        description: "The Webhook content"
        required: true
        schema:
          $ref: "#/definitions/models.WMessage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Webhook accepted successfully"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/domain/:
    get:
      tags:
      - "subaccount/domain"
      description: "Get All Domains"
      operationId: "DomainRouter.GetAll"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all domains for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Domain"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "subaccount/domain"
      description: "Create Domain"
      operationId: "DomainRouter.Create"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Domain content"
        required: true
        schema:
          $ref: "#/definitions/models.EDomain"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Domain Created Successfully\""
          schema:
            $ref: "#/definitions/models.Domain"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/domain/{domainId}:
    get:
      tags:
      - "subaccount/domain"
      description: "Find Domain by DomainId"
      operationId: "DomainRouter.Get"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "domainId"
        in: "path"
        description: "the DomainId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainId"
      responses:
        "200":
          description: "\"Retrieved Domain from domainId successfully\""
          schema:
            $ref: "#/definitions/models.Domain"
        "401":
          description: "Not Authorized"
        "406":
          description: ":domainId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "subaccount/domain"
      description: "Update Domain"
      operationId: "DomainRouter.Update"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "domainId"
        in: "path"
        description: "The DomainId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainId"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.EDomain"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated Domain successfully\""
          schema:
            $ref: "#/definitions/models.Domain"
        "401":
          description: "Not Authorized"
        "406":
          description: ":domainId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subaccount/domain"
      description: "Delete Domain"
      operationId: "DomainRouter.Delete"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "domainId"
        in: "path"
        description: "The DomainId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainId"
      responses:
        "200":
          description: "\"Domain deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":domainId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/domain/{domainId}/verify:
    post:
      tags:
      - "subaccount/domain"
      description: "Verify Domain By Domain Id"
      operationId: "DomainRouter.Verify"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "domainId"
        in: "path"
        description: "the DomainId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainId"
      responses:
        "200":
          description: "\"Retrieved Domain from domainId successfully\""
          schema:
            $ref: "#/definitions/models.Domain"
        "401":
          description: "Not Authorized"
        "406":
          description: ":domainId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/domain/{domainId}/verify/email:
    post:
      tags:
      - "subaccount/domain"
      description: "Verify Domain By Email Request"
      operationId: "DomainRouter.Verify Request"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "domainId"
        in: "path"
        description: "the DomainId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainId"
      - name: "redirectPath"
        in: "query"
        description: "redirectPath"
        required: false
        type: "string"
        x-exportParamName: "RedirectPath"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The Email to be used to verify"
        required: true
        schema:
          $ref: "#/definitions/models.VerifyByTokenRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success Email Verification Link sent"
        "400":
          description: "Bad Request Email and Domain don't match or not"
        "401":
          description: "Not Authorized"
        "403":
          description: "Forbidden Already verified"
        "406":
          description: ":domainId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/domain/{domainId}/verify/email/{token}:
    post:
      tags:
      - "subaccount/domain"
      description: "Verify Domain By Signed Token"
      operationId: "DomainRouter.Verify By Token"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "domainId"
        in: "path"
        description: "the DomainId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "DomainId"
      - name: "token"
        in: "path"
        description: "The signed token used to verify"
        required: true
        type: "string"
        x-exportParamName: "Token"
      responses:
        "200":
          description: "\"Retrieved Domain from domainId successfully\""
          schema:
            $ref: "#/definitions/models.Domain"
        "401":
          description: "Not Authorized"
        "406":
          description: ":domainId is empty or token is invalid"
        "500":
          description: "Internal Server Error"
  /subaccount/domain/count:
    get:
      tags:
      - "subaccount/domain"
      description: "Count Total Domains"
      operationId: "DomainRouter.Count"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      responses:
        "200":
          description: "\"Total count of domains for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/email/:
    post:
      tags:
      - "subaccount/email"
      description: "Send Email To Contacts"
      operationId: "EmailRouter.Send Email"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Email Message"
        required: true
        schema:
          $ref: "#/definitions/models.EmailMessage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Email Message Processed Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.EmailResponse"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/email/template:
    post:
      tags:
      - "subaccount/email"
      description: "Send Email To Contacts With Template"
      operationId: "EmailRouter.Send Email With Template"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Email Message"
        required: true
        schema:
          $ref: "#/definitions/models.EmailMessage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Email Message Processed Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.EmailResponse"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/ippool/:
    get:
      tags:
      - "subaccount/ippool"
      description: "Get All IPPools"
      operationId: "IPPoolRouter.GetAll"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all ippools for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.IPPool"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "subaccount/ippool"
      description: "Create IPPool"
      operationId: "IPPoolRouter.Create"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "The IPPool content"
        required: true
        schema:
          $ref: "#/definitions/models.EIPPool"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"IPPool Created Successfully\""
          schema:
            $ref: "#/definitions/models.IPPool"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/ippool/{ippoolid}:
    get:
      tags:
      - "subaccount/ippool"
      description: "Find IPPool by IPPoolId"
      operationId: "IPPoolRouter.Get"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "ippoolid"
        in: "path"
        description: "the IPPoolId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ippoolid"
      responses:
        "200":
          description: "\"Retrieved IPPool from ippoolid successfully\""
          schema:
            $ref: "#/definitions/models.IPPool"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ippoolid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "subaccount/ippool"
      description: "Update IPPool"
      operationId: "IPPoolRouter.Update"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "ippoolid"
        in: "path"
        description: "The IPPoolId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ippoolid"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.EIPPool"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated IPPool successfully\""
          schema:
            $ref: "#/definitions/models.IPPool"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ippoolid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subaccount/ippool"
      description: "Delete IPPool"
      operationId: "IPPoolRouter.Delete"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "ippoolid"
        in: "path"
        description: "The IPPoolId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ippoolid"
      responses:
        "200":
          description: "\"IPPool deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":ippoolid is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/ippool/count:
    get:
      tags:
      - "subaccount/ippool"
      description: "Count Total IPPools"
      operationId: "IPPoolRouter.Count"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      responses:
        "200":
          description: "\"Total count of domains for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/sender/:
    get:
      tags:
      - "subaccount/sender"
      description: "Get All Senders"
      operationId: "SenderRouter.GetAll"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search term"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved all senders for sub-account successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Sender"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "subaccount/sender"
      description: "Create Sender"
      operationId: "SenderRouter.Create"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "The Sender content"
        required: true
        schema:
          $ref: "#/definitions/models.ESender"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Sender Created Successfully\""
          schema:
            $ref: "#/definitions/models.Sender"
        "401":
          description: "Not Authorized"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/sender/{senderId}:
    get:
      tags:
      - "subaccount/sender"
      description: "Find Sender by SenderId"
      operationId: "SenderRouter.Get"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "senderId"
        in: "path"
        description: "the SenderId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SenderId"
      responses:
        "200":
          description: "\"Retrieved Sender from senderId successfully\""
          schema:
            $ref: "#/definitions/models.Sender"
        "401":
          description: "Not Authorized"
        "406":
          description: ":senderId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "subaccount/sender"
      description: "Update Sender"
      operationId: "SenderRouter.Update"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "senderId"
        in: "path"
        description: "The SenderId you want to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SenderId"
      - in: "body"
        name: "body"
        description: "The body"
        required: true
        schema:
          $ref: "#/definitions/models.ESender"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Updated Sender successfully\""
          schema:
            $ref: "#/definitions/models.Sender"
        "401":
          description: "Not Authorized"
        "406":
          description: ":senderId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subaccount/sender"
      description: "Delete Sender"
      operationId: "SenderRouter.Delete"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "senderId"
        in: "path"
        description: "The SenderId you want to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SenderId"
      responses:
        "200":
          description: "\"Sender deleted successfully\""
          schema:
            $ref: "#/definitions/models.DeleteResponse"
        "401":
          description: "Not Authorized"
        "406":
          description: ":senderId is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/sender/count:
    get:
      tags:
      - "subaccount/sender"
      description: "Count Total Senders"
      operationId: "SenderRouter.Count"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      responses:
        "200":
          description: "\"Total count of domains for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Sub-Account Stats"
      operationId: "SubAccountStatRouter.Get All Sub-Account Stats"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.RStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/aggregate:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Aggregate Sub-Account Stats"
      operationId: "SubAccountStatRouter.Get All Aggregate Sub-Account Stats"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/aggregate/group:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Aggregate Sub-Account Stats by Group"
      operationId: "SubAccountStatRouter.Get All Aggregate Sub-Account Stats by Group"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        description: "the group whose stats you want"
        required: true
        type: "string"
        x-exportParamName: "Group"
      responses:
        "200":
          description: "\"Retrieved Stats successfully\""
          schema:
            $ref: "#/definitions/models.Stat"
        "401":
          description: "Not Authorized"
        "406":
          description: ":group is empty"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/aggregate/groups:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Aggregated Group Stats for a Sub-Account"
      operationId: "SubAccountStatRouter.Get All Aggregated Group Stats for a Sub-Account"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.AGStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/aggregate/ip/{ipid}/providers:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Aggregated Provider Stats for a Specific IP of a Sub-Account"
      operationId: "SubAccountStatRouter.Get All Aggregated Provider Stats for a Specific\
        \ IP of a Sub-Account"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "ipid"
        in: "path"
        description: "the IPId you want to get"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Ipid"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.PIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/aggregate/ips:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Aggregated IP Stats for a Sub-Account"
      operationId: "SubAccountStatRouter.Get All Aggregated IP Stats for a Sub-Account"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.AIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/aggregate/providers:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Aggregated Provider Stats for a Sub-Account"
      operationId: "SubAccountStatRouter.Get All Aggregated Provider Stats for a Sub-Account"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.PIPStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/stat/group:
    get:
      tags:
      - "subaccount/stat"
      description: "Get All Sub-Account Stats by Group"
      operationId: "SubAccountStatRouter.Get All Sub-Account Stats by Group"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "group"
        in: "query"
        description: "the tag whose stats you want"
        required: true
        type: "string"
        x-exportParamName: "Group"
      responses:
        "200":
          description: "\"Retrieved Stats Successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.RStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/suppression/:
    get:
      tags:
      - "subaccount/suppression"
      description: "Get all suppressions"
      operationId: "SuppressionRouter.Get All Suppressions"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int64"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "search"
        in: "query"
        description: "search"
        required: false
        type: "string"
        x-exportParamName: "Search"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Suppressions retrieved successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.Suppression"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "subaccount/suppression"
      description: "Add Email Addresses To Suppression List"
      operationId: "SuppressionRouter.Create Suppressions"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "Suppression content"
        required: true
        schema:
          $ref: "#/definitions/models.RSuppression"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Suppressions created successfully\""
          schema:
            $ref: "#/definitions/models.Suppression"
        "401":
          description: "Not Authorized"
        "406":
          description: "Suppression list is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subaccount/suppression"
      description: "Delete specific emails which are in suppression list"
      operationId: "SuppressionRouter.Delete Suppression"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - in: "body"
        name: "body"
        description: "Suppression content"
        required: true
        schema:
          $ref: "#/definitions/models.RDSuppression"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Emails in suppression list have been deleted successfully\""
          schema:
            $ref: "#/definitions/models.Suppression"
        "401":
          description: "Not Authorized"
        "406":
          description: "suppression list is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /subaccount/suppression/count:
    get:
      tags:
      - "subaccount/suppression"
      description: "Count Total Suppressions"
      operationId: "SuppressionRouter.Count"
      parameters:
      - name: "X-SubAccount-ApiKey"
        in: "header"
        description: "Sub-Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XSubAccountApiKey"
      - name: "from"
        in: "query"
        description: "from date"
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "to date"
        required: false
        type: "string"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "\"Total count of Suppressions for a specific sub-account\""
          schema:
            $ref: "#/definitions/models.CountStat"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /subaccount/suppression/filter:
    post:
      tags:
      - "subaccount/suppression"
      description: "Add Email Addresses To Suppression Filter"
      operationId: "SuppressionRouter.Create Suppressions In Suppression Filter"
      parameters:
      - in: "body"
        name: "body"
        description: "Add suppressions to suppression filter"
        required: true
        schema:
          $ref: "#/definitions/models.Suppression"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Emails in suppression list have been added successfully\""
        "401":
          description: "Not Authorized"
        "406":
          description: "Suppression list is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subaccount/suppression"
      description: "Delete specific emails which are in suppression list"
      operationId: "SuppressionRouter.Delete Suppressions in Suppression Filter"
      parameters:
      - in: "body"
        name: "body"
        description: "Suppression content"
        required: true
        schema:
          $ref: "#/definitions/models.Suppression"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "\"Emails in suppression list have been deleted successfully\""
        "401":
          description: "Not Authorized"
        "406":
          description: "suppression list is empty"
        "422":
          description: "Request body is not in proper format"
        "500":
          description: "Internal Server Error"
  /system/template/:
    get:
      tags:
      - "system/template"
      description: "Get all System Templates"
      operationId: "SystemTemplateRouter.GetAllSystemTemplates"
      parameters:
      - name: "X-Account-ApiKey"
        in: "header"
        description: "Account API Key"
        required: true
        type: "string"
        x-exportParamName: "XAccountApiKey"
      responses:
        "200":
          description: "\"All System Templates data received successfully\""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/models.SystemTemplate"
        "401":
          description: "Not Authorized"
        "500":
          description: "Internal Server Error"
  /track/click/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}:
    get:
      tags:
      - "track"
      description: "Track Link Click"
      operationId: "TrackRouter.Track Link Click"
      parameters:
      - name: "ipId"
        in: "path"
        description: "The id of ip from which this email message was sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IpId"
      - name: "accountId"
        in: "path"
        description: "The id of account from which email is being sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "AccountId"
      - name: "subAccountId"
        in: "path"
        description: "The id of sub-account from which email is being sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      - name: "messageId"
        in: "path"
        description: "The UUID of message which was sent"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      - name: "emailType"
        in: "path"
        description: "The type of email such as gmail, yahoo etc. which was sent.\
          \ This is inferred from to email address"
        required: true
        type: "string"
        x-exportParamName: "EmailType"
      - name: "redirecturl"
        in: "query"
        description: "The encoded redirect URL"
        required: true
        type: "string"
        x-exportParamName: "Redirecturl"
      responses:
        "302":
          description: "Redirect"
  /track/open/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}/1.png:
    get:
      tags:
      - "track"
      description: "Track Email Open"
      operationId: "TrackRouter.Track Email Open"
      parameters:
      - name: "ipId"
        in: "path"
        description: "The id of ip from which this email message was sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IpId"
      - name: "accountId"
        in: "path"
        description: "The id of account from which email is being sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "AccountId"
      - name: "subAccountId"
        in: "path"
        description: "The id of sub-account from which email is being sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      - name: "messageId"
        in: "path"
        description: "The UUID of message which was sent"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      - name: "emailType"
        in: "path"
        description: "The type of email such as gmail, yahoo etc. which was sent.\
          \ This is inferred from to email address"
        required: true
        type: "string"
        x-exportParamName: "EmailType"
      responses:
        "302":
          description: "Redirect"
  /track/unsubscribe/{accountId}/{subAccountId}/{ipId}/{emailType}/{messageId}:
    get:
      tags:
      - "track"
      description: "track link click"
      operationId: "TrackRouter.Track Unsubscribe"
      parameters:
      - name: "ipId"
        in: "path"
        description: "The id of ip from which this email message was sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IpId"
      - name: "accountId"
        in: "path"
        description: "The id of account from which email is being sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "AccountId"
      - name: "subAccountId"
        in: "path"
        description: "The id of sub-account from which email is being sent"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "SubAccountId"
      - name: "messageId"
        in: "path"
        description: "The UUID of message which was sent"
        required: true
        type: "string"
        x-exportParamName: "MessageId"
      - name: "emailType"
        in: "path"
        description: "The type of email such as gmail, yahoo etc. which was sent.\
          \ This is inferred from to email address"
        required: true
        type: "string"
        x-exportParamName: "EmailType"
      responses:
        "302":
          description: "Redirect"
definitions:
  ".alert":
    type: "object"
  ".provider":
    type: "object"
  api.GlockappsMailReport:
    type: "object"
  models.AGStat:
    type: "object"
    properties:
      group:
        type: "string"
      stat:
        $ref: "#/definitions/models.Stat"
    title: "AGStat"
    example:
      stat:
        processed: 2
        unsubscribed: 2
        hardBounced: 5
        dropped: 1
        softBounced: 9
        delivered: 6
        opened: 5
        spam: 3
        clicked: 0
        sent: 7
      group: "group"
  models.AIPStat:
    type: "object"
    properties:
      ipid:
        type: "integer"
        format: "int64"
      publicIP:
        type: "string"
      stat:
        $ref: "#/definitions/models.IPStat"
    title: "AIPStat"
    example:
      stat:
        hardBounced: 5
        year: 1
        dropped: 5
        delivered: 1
        opened: 7
        clicked: 0
        sent: 3
        processed: 9
        unsubscribed: 7
        month: 2
        softBounced: 2
        spam: 4
        day: 6
      ipid: 0
      publicIP: "publicIP"
  models.Account:
    type: "object"
    properties:
      alertSlackEndpoint:
        type: "string"
      apiKey:
        type: "string"
      companyName:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      currentEmailServiceProvider:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      incidentSlackEndpoint:
        type: "string"
      industry:
        type: "string"
      isCanceled:
        type: "boolean"
      isLastPaymentFailed:
        type: "boolean"
      isUpgraded:
        type: "boolean"
      lockThreshold:
        type: "integer"
        format: "int64"
      locked:
        type: "boolean"
      logoURL:
        type: "string"
      name:
        type: "string"
      onboardCFinished:
        type: "boolean"
      onboardQAnswered:
        type: "boolean"
      sendingVolumePerMonth:
        type: "string"
      slackToken:
        type: "string"
      stripeBasePriceId:
        type: "string"
      stripeUsagePriceId:
        type: "string"
    title: "Account"
    example:
      isUpgraded: true
      alertSlackEndpoint: "alertSlackEndpoint"
      isCanceled: true
      apiKey: "apiKey"
      lockThreshold: 1
      created: 0
      companyName: "companyName"
      slackToken: "slackToken"
      sendingVolumePerMonth: "sendingVolumePerMonth"
      industry: "industry"
      stripeBasePriceId: "stripeBasePriceId"
      currentEmailServiceProvider: "currentEmailServiceProvider"
      logoURL: "logoURL"
      incidentSlackEndpoint: "incidentSlackEndpoint"
      onboardQAnswered: true
      name: "name"
      stripeUsagePriceId: "stripeUsagePriceId"
      id: 6
      locked: true
      isLastPaymentFailed: true
      onboardCFinished: true
  models.AccountDomain:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      dkim:
        $ref: "#/definitions/models.DNSRecord"
      dkimConfig:
        type: "string"
      dkimVerified:
        type: "boolean"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      returnPath:
        $ref: "#/definitions/models.DNSRecord"
      returnPathVerified:
        type: "boolean"
      subAccount:
        $ref: "#/definitions/models.SubAccount"
      track:
        $ref: "#/definitions/models.DNSRecord"
      trackVerified:
        type: "boolean"
      verified:
        type: "boolean"
    title: "AccountDomain"
    example:
      dkim:
        textValue: "textValue"
        host: "host"
        type: "type"
      returnPath:
        textValue: "textValue"
        host: "host"
        type: "type"
      created: 0
      name: "name"
      verified: true
      dkimVerified: true
      id: 6
      returnPathVerified: true
      dkimConfig: "dkimConfig"
      track:
        textValue: "textValue"
        host: "host"
        type: "type"
      subAccount:
        apiKey: "apiKey"
        created: 1
        name: "name"
        id: 5
        type: {}
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        smtpAuths:
        - password: "password"
          created: 7
          id: 9
          updated: 3
          username: "username"
        - password: "password"
          created: 7
          id: 9
          updated: 3
          username: "username"
      trackVerified: true
  models.AccountIPPool:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      ips:
        type: "array"
        items:
          $ref: "#/definitions/models.IP"
      name:
        type: "string"
      routingMetaData:
        type: "string"
      routingStrategy:
        type: "integer"
        format: "int64"
      type:
        $ref: "#/definitions/models.IPPoolType"
    title: "AccountIPPool"
    example:
      created: 0
      routingStrategy: 1
      name: "name"
      id: 6
      routingMetaData: "routingMetaData"
      type: {}
      ips:
      - yahooSettings: "yahooSettings"
        comcastSettings: "comcastSettings"
        created: 2
        icloudSettings: "icloudSettings"
        publicIP: "publicIP"
        type: {}
        zohoSettings: "zohoSettings"
        gmxSettings: "gmxSettings"
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        systemDomain:
          dkim:
            textValue: "textValue"
            host: "host"
            type: "type"
          mailboxVerified: true
          created: 1
          name: "name"
          spf:
            textValue: "textValue"
            host: "host"
            type: "type"
          dkimVerified: true
          id: 1
          dkimConfig: "dkimConfig"
          track:
            textValue: "textValue"
            host: "host"
            type: "type"
          spfVerified: true
          trackVerified: true
        reverseDNSHostname: "reverseDNSHostname"
        infraMonitor: true
        autoWarmupEnabled: true
        ipDomainWarmupStatus:
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        mailruSettings: "mailruSettings"
        aolSettings: "aolSettings"
        id: 7
        yandexSettings: "yandexSettings"
        infraClassification: "infraClassification"
        qqSettings: "qqSettings"
        defaultSettings: "defaultSettings"
        gmailSettings: "gmailSettings"
        microsoftSettings: "microsoftSettings"
      - yahooSettings: "yahooSettings"
        comcastSettings: "comcastSettings"
        created: 2
        icloudSettings: "icloudSettings"
        publicIP: "publicIP"
        type: {}
        zohoSettings: "zohoSettings"
        gmxSettings: "gmxSettings"
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        systemDomain:
          dkim:
            textValue: "textValue"
            host: "host"
            type: "type"
          mailboxVerified: true
          created: 1
          name: "name"
          spf:
            textValue: "textValue"
            host: "host"
            type: "type"
          dkimVerified: true
          id: 1
          dkimConfig: "dkimConfig"
          track:
            textValue: "textValue"
            host: "host"
            type: "type"
          spfVerified: true
          trackVerified: true
        reverseDNSHostname: "reverseDNSHostname"
        infraMonitor: true
        autoWarmupEnabled: true
        ipDomainWarmupStatus:
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        mailruSettings: "mailruSettings"
        aolSettings: "aolSettings"
        id: 7
        yandexSettings: "yandexSettings"
        infraClassification: "infraClassification"
        qqSettings: "qqSettings"
        defaultSettings: "defaultSettings"
        gmailSettings: "gmailSettings"
        microsoftSettings: "microsoftSettings"
  models.AccountTemplate:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      html:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      template:
        type: "string"
      text:
        type: "string"
      updated:
        type: "integer"
        format: "int64"
    title: "AccountTemplate"
    example:
      template: "template"
      created: 0
      name: "name"
      html: "html"
      id: 6
      text: "text"
      updated: 1
  models.AccountWebhook:
    type: "object"
    properties:
      clicked:
        type: "boolean"
      created:
        type: "integer"
        format: "int64"
      delivered:
        type: "boolean"
      dropped:
        type: "boolean"
      enabled:
        type: "boolean"
      hardBounced:
        type: "boolean"
      id:
        type: "integer"
        format: "int64"
      opened:
        type: "boolean"
      processed:
        type: "boolean"
      sent:
        type: "boolean"
      softBounced:
        type: "boolean"
      spam:
        type: "boolean"
      unsubscribed:
        type: "boolean"
      url:
        type: "string"
    title: "AccountWebhook"
    example:
      hardBounced: true
      created: 0
      dropped: true
      delivered: true
      opened: true
      clicked: true
      sent: true
      enabled: true
      url: "url"
      processed: true
      unsubscribed: true
      softBounced: true
      id: 6
      spam: true
  models.AlertLabel:
    type: "object"
  models.AlertRequest:
    type: "object"
    properties:
      active:
        type: "boolean"
      emails: {}
      entityType:
        type: "string"
      entityValue:
        type: "integer"
        format: "int64"
      label:
        $ref: "#/definitions/models.AlertLabel"
      member:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      notificationType:
        $ref: "#/definitions/models.NotificationType"
      parameter:
        type: "integer"
        format: "int64"
      provider:
        type: "string"
      slackUrl:
        type: "string"
      threshold:
        type: "string"
    title: "AlertRequest"
  models.AlertResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      success:
        type: "boolean"
    title: "AlertResponse"
    example:
      success: true
      name: "name"
      id: 0
  models.AllClusterCache:
    type: "object"
    properties:
      result:
        type: "array"
        items:
          $ref: "#/definitions/models.ClusterCache"
    title: "AllClusterCache"
    example:
      result:
      - found: true
        data: "data"
        type: "type"
        key: "key"
      - found: true
        data: "data"
        type: "type"
        key: "key"
  models.AuthInfo:
    type: "object"
    properties:
      Accounts:
        type: "array"
        items:
          $ref: "#/definitions/models.Account"
      Member:
        $ref: "#/definitions/models.Member"
    title: "AuthInfo"
    example:
      Member:
        phoneNumber: "phoneNumber"
        isForbidden: true
        isVerified: true
        created: 0
        companyName: "companyName"
        onboardQAnswered: true
        name: "name"
        id: 6
        email: "email"
        url: "url"
      Accounts:
      - isUpgraded: true
        alertSlackEndpoint: "alertSlackEndpoint"
        isCanceled: true
        apiKey: "apiKey"
        lockThreshold: 1
        created: 0
        companyName: "companyName"
        slackToken: "slackToken"
        sendingVolumePerMonth: "sendingVolumePerMonth"
        industry: "industry"
        stripeBasePriceId: "stripeBasePriceId"
        currentEmailServiceProvider: "currentEmailServiceProvider"
        logoURL: "logoURL"
        incidentSlackEndpoint: "incidentSlackEndpoint"
        onboardQAnswered: true
        name: "name"
        stripeUsagePriceId: "stripeUsagePriceId"
        id: 6
        locked: true
        isLastPaymentFailed: true
        onboardCFinished: true
      - isUpgraded: true
        alertSlackEndpoint: "alertSlackEndpoint"
        isCanceled: true
        apiKey: "apiKey"
        lockThreshold: 1
        created: 0
        companyName: "companyName"
        slackToken: "slackToken"
        sendingVolumePerMonth: "sendingVolumePerMonth"
        industry: "industry"
        stripeBasePriceId: "stripeBasePriceId"
        currentEmailServiceProvider: "currentEmailServiceProvider"
        logoURL: "logoURL"
        incidentSlackEndpoint: "incidentSlackEndpoint"
        onboardQAnswered: true
        name: "name"
        stripeUsagePriceId: "stripeUsagePriceId"
        id: 6
        locked: true
        isLastPaymentFailed: true
        onboardCFinished: true
  models.AutoWarmupContent:
    type: "object"
    properties:
      contentList:
        type: "string"
      domain:
        type: "string"
      id:
        type: "integer"
        format: "int64"
    title: "AutoWarmupContent"
  models.AutoWarmupContentRequest:
    type: "object"
    properties:
      contentList:
        type: "array"
        items:
          $ref: "#/definitions/models.Content"
      domain:
        type: "string"
    title: "AutoWarmupContentRequest"
  models.AutoWarmupDailySchedule:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
      source:
        type: "string"
      type:
        type: "string"
    title: "AutoWarmupDailySchedule"
  models.AutoWarmupDomainSchedule:
    type: "object"
    properties:
      dailySchedule:
        type: "array"
        items:
          $ref: "#/definitions/models.AutoWarmupDailySchedule"
      domain:
        type: "string"
    title: "AutoWarmupDomainSchedule"
  models.AutoWarmupPlan:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      schedule:
        type: "string"
      updated:
        type: "integer"
        format: "int64"
    title: "AutoWarmupPlan"
  models.AutoWarmupPlanRequest:
    type: "object"
    properties:
      name:
        type: "string"
      schedule:
        type: "array"
        items:
          $ref: "#/definitions/models.AutoWarmupDomainSchedule"
    title: "AutoWarmupPlanRequest"
  models.AutoWarmupRecipient:
    type: "object"
    properties:
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      source:
        type: "string"
      type:
        type: "string"
    title: "AutoWarmupRecipient"
  models.AutoWarmupRecipientResponse:
    type: "object"
    properties:
      email:
        type: "string"
      errorCode:
        $ref: "#/definitions/models.EmailErrorCode"
      message:
        type: "string"
    title: "AutoWarmupRecipientResponse"
  models.BackOffConfiguration:
    type: "object"
    properties:
      concurrentConnections:
        type: "integer"
        format: "int64"
      concurrentConnectionsType:
        $ref: "#/definitions/models.BackOffDecreaseType"
      sendPerDay:
        type: "integer"
        format: "int64"
      sendPerDayType:
        $ref: "#/definitions/models.BackOffDecreaseType"
      sendPerHour:
        type: "integer"
        format: "int64"
      sendPerHourType:
        $ref: "#/definitions/models.BackOffDecreaseType"
      sendPerMinute:
        type: "integer"
        format: "int64"
      sendPerMinuteType:
        $ref: "#/definitions/models.BackOffDecreaseType"
    title: "BackOffConfiguration"
  models.BackOffDecreaseType:
    type: "object"
  models.BackOffTrigger:
    type: "object"
    properties:
      deferralPercentage:
        type: "integer"
        format: "int64"
      durationInMinutes:
        type: "integer"
        format: "int64"
      hardBouncePercentage:
        type: "integer"
        format: "int64"
      minimumAttempts:
        type: "integer"
        format: "int64"
    title: "BackOffTrigger"
  models.BillingPortalSession:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      customer:
        type: "string"
      id:
        type: "string"
      livemode:
        type: "boolean"
      object:
        type: "string"
      return_url:
        type: "string"
      url:
        type: "string"
    title: "BillingPortalSession"
    example:
      livemode: true
      created: 0
      return_url: "return_url"
      id: "id"
      url: "url"
      customer: "customer"
      object: "object"
  models.BlackListEngine:
    type: "object"
    properties:
      confidence:
        type: "string"
      detected:
        type: "boolean"
      elapsed:
        type: "string"
      engine:
        type: "string"
      reference:
        type: "string"
    title: "BlackListEngine"
    example:
      elapsed: "elapsed"
      reference: "reference"
      engine: "engine"
      confidence: "confidence"
      detected: true
  models.BlackListResult:
    type: "object"
    properties:
      alexaTop100k:
        type: "boolean"
      alexaTop10k:
        type: "boolean"
      alexaTop250k:
        type: "boolean"
      blackLists:
        type: "array"
        items:
          $ref: "#/definitions/models.BlackListEngine"
      domainLength:
        type: "integer"
        format: "int32"
      host:
        type: "string"
      mostAbusedTld:
        type: "boolean"
    title: "BlackListResult"
    example:
      mostAbusedTld: true
      alexaTop250k: true
      domainLength: 5
      blackLists:
      - elapsed: "elapsed"
        reference: "reference"
        engine: "engine"
        confidence: "confidence"
        detected: true
      - elapsed: "elapsed"
        reference: "reference"
        engine: "engine"
        confidence: "confidence"
        detected: true
      host: "host"
      alexaTop10k: true
      alexaTop100k: true
  models.BlacklistStatus:
    type: "integer"
  models.BulkResponse:
    type: "object"
    properties:
      jobId:
        type: "integer"
        format: "int64"
      message:
        type: "string"
    title: "BulkResponse"
    example:
      jobId: 0
      message: "message"
  models.CertificateDetails:
    type: "object"
    properties:
      extensions:
        $ref: "#/definitions/models.CertificateExtensions"
      issuer:
        $ref: "#/definitions/models.CertificateIssuer"
      signature:
        $ref: "#/definitions/models.CertificateSignature"
      subject:
        $ref: "#/definitions/models.CertificateSubject"
      validity:
        $ref: "#/definitions/models.CertificateValidity"
    title: "CertificateDetails"
    example:
      extensions:
        authorityKeyIdentifier: "authorityKeyIdentifier"
        keyUsage: "keyUsage"
        authorityInfoAccess: "authorityInfoAccess"
        certificatePolicies: "certificatePolicies"
        basicConstraints: "basicConstraints"
        extendedKeyUsage: "extendedKeyUsage"
        subjectKeyIdentifier: "subjectKeyIdentifier"
        crlDistributionPoints: "crlDistributionPoints"
      signature:
        serial: "serial"
        serialHex: "serialHex"
        type: "type"
      subject:
        alternativeNames: "alternativeNames"
        commonName: "commonName"
        name: "name"
      validity:
        daysLeft: 5
        validFrom: "validFrom"
        validFromTimestamp: 2
        validTo: "validTo"
        validToTimestamp: 7
      issuer:
        commonName: "commonName"
        country: "country"
        organization: "organization"
        organizationUnit: "organizationUnit"
  models.CertificateExtensions:
    type: "object"
    properties:
      authorityInfoAccess:
        type: "string"
      authorityKeyIdentifier:
        type: "string"
      basicConstraints:
        type: "string"
      certificatePolicies:
        type: "string"
      crlDistributionPoints:
        type: "string"
      extendedKeyUsage:
        type: "string"
      keyUsage:
        type: "string"
      subjectKeyIdentifier:
        type: "string"
    title: "CertificateExtensions"
    example:
      authorityKeyIdentifier: "authorityKeyIdentifier"
      keyUsage: "keyUsage"
      authorityInfoAccess: "authorityInfoAccess"
      certificatePolicies: "certificatePolicies"
      basicConstraints: "basicConstraints"
      extendedKeyUsage: "extendedKeyUsage"
      subjectKeyIdentifier: "subjectKeyIdentifier"
      crlDistributionPoints: "crlDistributionPoints"
  models.CertificateIssuer:
    type: "object"
    properties:
      commonName:
        type: "string"
      country:
        type: "string"
      organization:
        type: "string"
      organizationUnit:
        type: "string"
    title: "CertificateIssuer"
    example:
      commonName: "commonName"
      country: "country"
      organization: "organization"
      organizationUnit: "organizationUnit"
  models.CertificateSignature:
    type: "object"
    properties:
      serial:
        type: "string"
      serialHex:
        type: "string"
      type:
        type: "string"
    title: "CertificateSignature"
    example:
      serial: "serial"
      serialHex: "serialHex"
      type: "type"
  models.CertificateSubject:
    type: "object"
    properties:
      alternativeNames:
        type: "string"
      commonName:
        type: "string"
      name:
        type: "string"
    title: "CertificateSubject"
    example:
      alternativeNames: "alternativeNames"
      commonName: "commonName"
      name: "name"
  models.CertificateValidity:
    type: "object"
    properties:
      daysLeft:
        type: "integer"
        format: "int64"
      validFrom:
        type: "string"
      validFromTimestamp:
        type: "integer"
        format: "int64"
      validTo:
        type: "string"
      validToTimestamp:
        type: "integer"
        format: "int64"
    title: "CertificateValidity"
    example:
      daysLeft: 5
      validFrom: "validFrom"
      validFromTimestamp: 2
      validTo: "validTo"
      validToTimestamp: 7
  models.City:
    type: "object"
    properties:
      cityID:
        type: "integer"
        format: "int32"
      continentCode:
        type: "string"
      countryCode:
        type: "string"
      postalCode:
        type: "string"
      timeZone:
        type: "string"
    title: "City"
    example:
      countryCode: "countryCode"
      postalCode: "postalCode"
      timeZone: "timeZone"
      cityID: 6
      continentCode: "continentCode"
  models.CleanedList:
    type: "object"
    properties:
      detailedResponse:
        type: "array"
        items:
          $ref: "#/definitions/models.SingleCleanedMail"
      invalid: {}
      valid: {}
    title: "CleanedList"
    example:
      valid: ""
      invalid: ""
      detailedResponse:
      - valid: true
        reason: {}
        error: "error"
        email: "email"
      - valid: true
        reason: {}
        error: "error"
        email: "email"
  models.ClusterCache:
    type: "object"
    properties:
      data:
        type: "string"
      found:
        type: "boolean"
      key:
        type: "string"
      type:
        type: "string"
    title: "ClusterCache"
    example:
      found: true
      data: "data"
      type: "type"
      key: "key"
  models.Comment:
    type: "object"
    properties:
      author:
        $ref: "#/definitions/models.Member"
      content:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      incident:
        $ref: "#/definitions/models.Incident"
    title: "Comment"
    example:
      author:
        phoneNumber: "phoneNumber"
        isForbidden: true
        isVerified: true
        created: 0
        companyName: "companyName"
        onboardQAnswered: true
        name: "name"
        id: 6
        email: "email"
        url: "url"
      created: 0
      id: 6
      incident:
        summary: "summary"
        relatedSubAccount:
          apiKey: "apiKey"
          created: 1
          name: "name"
          id: 5
          type: {}
          labels:
          - color: "color"
            created: 5
            name: "name"
            id: 2
            type: {}
          - color: "color"
            created: 5
            name: "name"
            id: 2
            type: {}
          smtpAuths:
          - password: "password"
            created: 7
            id: 9
            updated: 3
            username: "username"
          - password: "password"
            created: 7
            id: 9
            updated: 3
            username: "username"
        author:
          phoneNumber: "phoneNumber"
          isForbidden: true
          isVerified: true
          created: 0
          companyName: "companyName"
          onboardQAnswered: true
          name: "name"
          id: 6
          email: "email"
          url: "url"
        created: 5
        closed: 1
        description: "description"
        id: 5
        relatedIP:
          yahooSettings: "yahooSettings"
          comcastSettings: "comcastSettings"
          created: 2
          icloudSettings: "icloudSettings"
          publicIP: "publicIP"
          type: {}
          zohoSettings: "zohoSettings"
          gmxSettings: "gmxSettings"
          labels:
          - color: "color"
            created: 5
            name: "name"
            id: 2
            type: {}
          - color: "color"
            created: 5
            name: "name"
            id: 2
            type: {}
          systemDomain:
            dkim:
              textValue: "textValue"
              host: "host"
              type: "type"
            mailboxVerified: true
            created: 1
            name: "name"
            spf:
              textValue: "textValue"
              host: "host"
              type: "type"
            dkimVerified: true
            id: 1
            dkimConfig: "dkimConfig"
            track:
              textValue: "textValue"
              host: "host"
              type: "type"
            spfVerified: true
            trackVerified: true
          reverseDNSHostname: "reverseDNSHostname"
          infraMonitor: true
          autoWarmupEnabled: true
          ipDomainWarmupStatus:
          - autoWarmupLastRunAt: 3
            autoWarmupDelay: 9
            warmupCompleted: true
            created: 2
            id: 7
            currentWarmupStage: 4
            updated: 1
          - autoWarmupLastRunAt: 3
            autoWarmupDelay: 9
            warmupCompleted: true
            created: 2
            id: 7
            currentWarmupStage: 4
            updated: 1
          mailruSettings: "mailruSettings"
          aolSettings: "aolSettings"
          id: 7
          yandexSettings: "yandexSettings"
          infraClassification: "infraClassification"
          qqSettings: "qqSettings"
          defaultSettings: "defaultSettings"
          gmailSettings: "gmailSettings"
          microsoftSettings: "microsoftSettings"
        updated: 4
        assignedTo:
          phoneNumber: "phoneNumber"
          isForbidden: true
          isVerified: true
          created: 0
          companyName: "companyName"
          onboardQAnswered: true
          name: "name"
          id: 6
          email: "email"
          url: "url"
        status: {}
        tags:
        - color: "color"
          created: 6
          name: "name"
          description: "description"
          id: 7
          updated: 1
        - color: "color"
          created: 6
          name: "name"
          description: "description"
          id: 7
          updated: 1
      content: "content"
  models.Content:
    type: "object"
    properties:
      headers: {}
      htmlBody:
        type: "string"
      preText:
        type: "string"
      subject:
        type: "string"
      textBody:
        type: "string"
    title: "Content"
  models.CountStat:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
    title: "CountStat"
    example:
      count: 0
  models.CouponOptions:
    type: "object"
    properties:
      couponCode:
        type: "string"
    title: "CouponOptions"
  models.CreateMailReport:
    type: "object"
    properties:
      email:
        type: "string"
      providers:
        type: "array"
        items:
          type: "string"
    title: "CreateMailReport"
  models.CustomerQuality:
    type: "object"
  models.DNSRecord:
    type: "object"
    properties:
      host:
        type: "string"
      textValue:
        type: "string"
      type:
        type: "string"
    title: "DNSRecord"
    example:
      textValue: "textValue"
      host: "host"
      type: "type"
  models.DeleteResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      message:
        type: "string"
    title: "DeleteResponse"
    example:
      id: 0
      message: "message"
  models.DetailedAlert:
    type: "object"
    properties:
      active:
        type: "boolean"
      entityType:
        type: "string"
      entityValue:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      label:
        $ref: "#/definitions/models.AlertLabel"
      name:
        type: "string"
      parameter:
        type: "integer"
        format: "int64"
      provider:
        type: "string"
      threshold:
        type: "string"
    title: "DetailedAlert"
    example:
      entityValue: "entityValue"
      provider: "provider"
      entityType: "entityType"
      parameter: 6
      name: "name"
      active: true
      threshold: "threshold"
      id: 0
      label: {}
  models.Domain:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      dkim:
        $ref: "#/definitions/models.DNSRecord"
      dkimConfig:
        type: "string"
      dkimVerified:
        type: "boolean"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      returnPath:
        $ref: "#/definitions/models.DNSRecord"
      returnPathVerified:
        type: "boolean"
      track:
        $ref: "#/definitions/models.DNSRecord"
      trackVerified:
        type: "boolean"
      verified:
        type: "boolean"
    title: "Domain"
    example:
      dkim:
        textValue: "textValue"
        host: "host"
        type: "type"
      returnPath:
        textValue: "textValue"
        host: "host"
        type: "type"
      created: 0
      name: "name"
      verified: true
      dkimVerified: true
      id: 6
      returnPathVerified: true
      dkimConfig: "dkimConfig"
      track:
        textValue: "textValue"
        host: "host"
        type: "type"
      trackVerified: true
  models.DomainAge:
    type: "object"
    properties:
      domainAgeFound:
        type: "boolean"
      domainAgeInDays:
        type: "integer"
        format: "int32"
      domainAgeInMonths:
        type: "integer"
        format: "int32"
      domainAgeInYears:
        type: "integer"
        format: "int32"
      domainCreationDate:
        type: "string"
      domainRegistered:
        type: "string"
      host:
        type: "string"
    title: "DomainAge"
    example:
      domainCreationDate: "domainCreationDate"
      domainAgeInDays: 0
      domainRegistered: "domainRegistered"
      host: "host"
      domainAgeInMonths: 6
      domainAgeFound: true
      domainAgeInYears: 1
  models.DomainCheckResult:
    type: "object"
    properties:
      dmarcPresent:
        type: "boolean"
      domainAge:
        $ref: "#/definitions/models.DomainAge"
      domainBlackList:
        $ref: "#/definitions/models.BlackListResult"
      domainSSL:
        $ref: "#/definitions/models.SSLInfo"
      spfPresent:
        type: "boolean"
    title: "DomainCheckResult"
    example:
      dmarcPresent: true
      domainBlackList:
        mostAbusedTld: true
        alexaTop250k: true
        domainLength: 5
        blackLists:
        - elapsed: "elapsed"
          reference: "reference"
          engine: "engine"
          confidence: "confidence"
          detected: true
        - elapsed: "elapsed"
          reference: "reference"
          engine: "engine"
          confidence: "confidence"
          detected: true
        host: "host"
        alexaTop10k: true
        alexaTop100k: true
      spfPresent: true
      domainAge:
        domainCreationDate: "domainCreationDate"
        domainAgeInDays: 0
        domainRegistered: "domainRegistered"
        host: "host"
        domainAgeInMonths: 6
        domainAgeFound: true
        domainAgeInYears: 1
      domainSSL:
        certificate:
          found: true
          fingerprint: "fingerprint"
          details:
            extensions:
              authorityKeyIdentifier: "authorityKeyIdentifier"
              keyUsage: "keyUsage"
              authorityInfoAccess: "authorityInfoAccess"
              certificatePolicies: "certificatePolicies"
              basicConstraints: "basicConstraints"
              extendedKeyUsage: "extendedKeyUsage"
              subjectKeyIdentifier: "subjectKeyIdentifier"
              crlDistributionPoints: "crlDistributionPoints"
            signature:
              serial: "serial"
              serialHex: "serialHex"
              type: "type"
            subject:
              alternativeNames: "alternativeNames"
              commonName: "commonName"
              name: "name"
            validity:
              daysLeft: 5
              validFrom: "validFrom"
              validFromTimestamp: 2
              validTo: "validTo"
              validToTimestamp: 7
            issuer:
              commonName: "commonName"
              country: "country"
              organization: "organization"
              organizationUnit: "organizationUnit"
          validPeer: true
          nameMatch: true
  models.EAccount:
    type: "object"
    properties:
      email:
        type: "string"
      jwtToken:
        type: "string"
      signupMode:
        type: "string"
      token:
        type: "string"
      uid:
        type: "string"
    title: "EAccount"
  models.EAccountMember:
    type: "object"
    properties:
      companyName:
        type: "string"
      currentEmailServiceProvider:
        type: "string"
      industry:
        type: "string"
      logoURL:
        type: "string"
      name:
        type: "string"
      onboardCFinished:
        type: "boolean"
      onboardQAnswered:
        type: "boolean"
      phoneNumber:
        type: "string"
      sendingVolumePerMonth:
        type: "string"
      uid:
        type: "string"
      verifyEmail:
        type: "boolean"
    title: "EAccountMember"
  models.EAccountSetting:
    type: "object"
    properties:
      companyName:
        type: "string"
      logoURL:
        type: "string"
    title: "EAccountSetting"
  models.EAlert:
    type: "object"
    properties:
      active:
        type: "string"
    title: "EAlert"
  models.EComment:
    type: "object"
    properties:
      author:
        $ref: "#/definitions/models.IEMember"
      content:
        type: "string"
    title: "EComment"
  models.EDomain:
    type: "object"
    properties:
      name:
        type: "string"
    title: "EDomain"
  models.EIP:
    type: "object"
    properties:
      publicIP:
        type: "string"
    title: "EIP"
  models.EIPPool:
    type: "object"
    properties:
      ips:
        type: "array"
        items:
          $ref: "#/definitions/models.EIP"
      name:
        type: "string"
      routingMapping: {}
      routingStrategy:
        type: "integer"
        format: "int64"
    title: "EIPPool"
  models.EIncident:
    type: "object"
    properties:
      assignedTo:
        $ref: "#/definitions/models.IEMember"
      author:
        $ref: "#/definitions/models.IEMember"
      description:
        type: "string"
      relatedIP:
        $ref: "#/definitions/models.IEIP"
      relatedSubAccount:
        $ref: "#/definitions/models.IESubAccount"
      status:
        type: "integer"
        format: "int64"
      summary:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/models.IETag"
    title: "EIncident"
  models.EIntegration:
    type: "object"
    properties:
      key:
        type: "string"
      settings:
        $ref: "#/definitions/models.IntegrationSettings"
    title: "EIntegration"
  models.EInvitation:
    type: "object"
    properties:
      fromEmail:
        type: "string"
      toEmail:
        type: "string"
    title: "EInvitation"
  models.EMember:
    type: "object"
    properties:
      name:
        type: "string"
      url:
        type: "string"
    title: "EMember"
  models.ESender:
    type: "object"
    properties:
      domain:
        type: "string"
      fromEmail:
        type: "string"
      name:
        type: "string"
      replyToEmail:
        type: "string"
    title: "ESender"
  models.ESubAccount:
    type: "object"
    properties:
      name:
        type: "string"
      labels:
        type: "array"
        items:
          type: "string"
    title: "ESubAccount"
  models.ESystemDomain:
    type: "object"
    properties:
      name:
        type: "string"
    title: "ESystemDomain"
  models.EValidation:
    title: "EValidation"
    type: "array"
    items:
      type: "string"
  models.EWebhook:
    type: "object"
    properties:
      clicked:
        type: "boolean"
      delivered:
        type: "boolean"
      dropped:
        type: "boolean"
      enabled:
        type: "boolean"
      hardBounced:
        type: "boolean"
      opened:
        type: "boolean"
      processed:
        type: "boolean"
      sent:
        type: "boolean"
      softBounced:
        type: "boolean"
      spam:
        type: "boolean"
      unsubscribed:
        type: "boolean"
      url:
        type: "string"
    title: "EWebhook"
  models.EditorTokenResponse:
    type: "object"
    properties:
      ".expires":
        type: "string"
      ".issued":
        type: "string"
      access_token:
        type: "string"
      as:client_id:
        type: "string"
      as:region:
        type: "string"
      expires_in:
        type: "integer"
        format: "int32"
      refresh_token:
        type: "string"
      token_type:
        type: "string"
      userName:
        type: "string"
    title: "EditorTokenResponse"
    example:
      access_token: "access_token"
      refresh_token: "refresh_token"
      as:client_id: "as:client_id"
      ".expires": ".expires"
      as:region: "as:region"
      token_type: "token_type"
      userName: "userName"
      expires_in: 0
      ".issued": ".issued"
  models.EmailErrorCode:
    type: "object"
  models.EmailList:
    type: "object"
    properties:
      emailIds: {}
    title: "EmailList"
  models.EmailMessage:
    type: "object"
    properties:
      ampBody:
        type: "string"
      from:
        $ref: "#/definitions/models.From"
      groups: {}
      headers: {}
      htmlBody:
        type: "string"
      ippool:
        type: "string"
      preText:
        type: "string"
      replyTo:
        $ref: "#/definitions/models.ReplyTo"
      subject:
        type: "string"
      template:
        type: "string"
      textBody:
        type: "string"
      to:
        type: "array"
        items:
          $ref: "#/definitions/models.To"
      trackClicks:
        type: "boolean"
      trackOpens:
        type: "boolean"
    title: "EmailMessage"
  models.EmailResponse:
    type: "object"
    properties:
      errorCode:
        $ref: "#/definitions/models.EmailErrorCode"
      message:
        type: "string"
      messageId:
        type: "string"
      submittedAt:
        type: "integer"
        format: "int64"
      to:
        type: "string"
    title: "EmailResponse"
    example:
      errorCode: {}
      messageId: "messageId"
      to: "to"
      message: "message"
      submittedAt: 0
  models.EventMetadata:
    type: "object"
    properties:
      clickedURL:
        type: "string"
      device:
        $ref: "#/definitions/uaparser.Device"
      geo:
        $ref: "#/definitions/models.City"
      os:
        $ref: "#/definitions/uaparser.Os"
      smtpCode:
        type: "integer"
        format: "int64"
      smtpDescription:
        type: "string"
      userAgent:
        $ref: "#/definitions/uaparser.UserAgent"
    title: "EventMetadata"
    example:
      geo:
        countryCode: "countryCode"
        postalCode: "postalCode"
        timeZone: "timeZone"
        cityID: 6
        continentCode: "continentCode"
      smtpDescription: "smtpDescription"
      os:
        Major: "Major"
        PatchMinor: "PatchMinor"
        Family: "Family"
        Minor: "Minor"
        Patch: "Patch"
      clickedURL: "clickedURL"
      smtpCode: 1
      userAgent:
        Major: "Major"
        Family: "Family"
        Minor: "Minor"
        Patch: "Patch"
      device:
        Family: "Family"
  models.EventType:
    type: "object"
  models.FrequencyType:
    type: "integer"
  models.From:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
    title: "From"
    example:
      name: "name"
      email: "email"
  models.GlockappsBlacklist:
    type: "object"
    properties:
      server:
        type: "string"
      status:
        $ref: "#/definitions/models.BlacklistStatus"
      txt:
        type: "string"
    title: "GlockappsBlacklist"
    example:
      server: "server"
      txt: "txt"
      status: {}
  models.GlockappsMonitorStat:
    type: "object"
    properties:
      day:
        type: "integer"
        format: "int64"
      listedCount:
        type: "integer"
        format: "int64"
      listedIn:
        type: "array"
        items:
          $ref: "#/definitions/models.GlockappsBlacklist"
      month:
        type: "integer"
        format: "int64"
      senderScore:
        type: "integer"
        format: "int64"
      year:
        type: "integer"
        format: "int64"
    title: "GlockappsMonitorStat"
    example:
      month: 1
      year: 5
      senderScore: 5
      day: 0
      listedCount: 6
      listedIn:
      - server: "server"
        txt: "txt"
        status: {}
      - server: "server"
        txt: "txt"
        status: {}
  models.IEIP:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    title: "IEIP"
  models.IEMember:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    title: "IEMember"
  models.IESubAccount:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    title: "IESubAccount"
  models.IETag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
    title: "IETag"
  models.IIP:
    type: "object"
    properties:
      labels: {}
      providerSettings:
        $ref: "#/definitions/models.ProviderSettings"
      type:
        $ref: "#/definitions/models.IIPUpdateType"
    title: "IIP"
  models.IIPUpdateType:
    type: "object"
  models.IP:
    type: "object"
    properties:
      aolSettings:
        type: "string"
      autoWarmupEnabled:
        type: "boolean"
      comcastSettings:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      defaultSettings:
        type: "string"
      gmailSettings:
        type: "string"
      gmxSettings:
        type: "string"
      icloudSettings:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      infraClassification:
        type: "string"
      infraMonitor:
        type: "boolean"
      ipDomainWarmupStatus:
        type: "array"
        items:
          $ref: "#/definitions/models.IPDomainWarmupStatus"
      labels:
        type: "array"
        items:
          $ref: "#/definitions/models.Label"
      mailruSettings:
        type: "string"
      microsoftSettings:
        type: "string"
      publicIP:
        type: "string"
      qqSettings:
        type: "string"
      reverseDNSHostname:
        type: "string"
      systemDomain:
        $ref: "#/definitions/models.SystemDomain"
      type:
        $ref: "#/definitions/models.IPType"
      yahooSettings:
        type: "string"
      yandexSettings:
        type: "string"
      zohoSettings:
        type: "string"
    title: "IP"
    example:
      yahooSettings: "yahooSettings"
      comcastSettings: "comcastSettings"
      created: 2
      icloudSettings: "icloudSettings"
      publicIP: "publicIP"
      type: {}
      zohoSettings: "zohoSettings"
      gmxSettings: "gmxSettings"
      labels:
      - color: "color"
        created: 5
        name: "name"
        id: 2
        type: {}
      - color: "color"
        created: 5
        name: "name"
        id: 2
        type: {}
      systemDomain:
        dkim:
          textValue: "textValue"
          host: "host"
          type: "type"
        mailboxVerified: true
        created: 1
        name: "name"
        spf:
          textValue: "textValue"
          host: "host"
          type: "type"
        dkimVerified: true
        id: 1
        dkimConfig: "dkimConfig"
        track:
          textValue: "textValue"
          host: "host"
          type: "type"
        spfVerified: true
        trackVerified: true
      reverseDNSHostname: "reverseDNSHostname"
      infraMonitor: true
      autoWarmupEnabled: true
      ipDomainWarmupStatus:
      - autoWarmupLastRunAt: 3
        autoWarmupDelay: 9
        warmupCompleted: true
        created: 2
        id: 7
        currentWarmupStage: 4
        updated: 1
      - autoWarmupLastRunAt: 3
        autoWarmupDelay: 9
        warmupCompleted: true
        created: 2
        id: 7
        currentWarmupStage: 4
        updated: 1
      mailruSettings: "mailruSettings"
      aolSettings: "aolSettings"
      id: 7
      yandexSettings: "yandexSettings"
      infraClassification: "infraClassification"
      qqSettings: "qqSettings"
      defaultSettings: "defaultSettings"
      gmailSettings: "gmailSettings"
      microsoftSettings: "microsoftSettings"
  models.IPDomainWarmupStatus:
    type: "object"
    properties:
      autoWarmupDelay:
        type: "integer"
        format: "int64"
      autoWarmupLastRunAt:
        type: "integer"
        format: "int64"
      created:
        type: "integer"
        format: "int64"
      currentWarmupStage:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      updated:
        type: "integer"
        format: "int64"
      warmupCompleted:
        type: "boolean"
    title: "IPDomainWarmupStatus"
    example:
      autoWarmupLastRunAt: 3
      autoWarmupDelay: 9
      warmupCompleted: true
      created: 2
      id: 7
      currentWarmupStage: 4
      updated: 1
  models.IPPool:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      ips:
        type: "array"
        items:
          $ref: "#/definitions/models.IP"
      name:
        type: "string"
      routingMetaData:
        type: "string"
      routingStrategy:
        type: "integer"
        format: "int64"
      type:
        $ref: "#/definitions/models.IPPoolType"
    title: "IPPool"
    example:
      created: 0
      routingStrategy: 1
      name: "name"
      id: 6
      routingMetaData: "routingMetaData"
      type: {}
      ips:
      - yahooSettings: "yahooSettings"
        comcastSettings: "comcastSettings"
        created: 2
        icloudSettings: "icloudSettings"
        publicIP: "publicIP"
        type: {}
        zohoSettings: "zohoSettings"
        gmxSettings: "gmxSettings"
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        systemDomain:
          dkim:
            textValue: "textValue"
            host: "host"
            type: "type"
          mailboxVerified: true
          created: 1
          name: "name"
          spf:
            textValue: "textValue"
            host: "host"
            type: "type"
          dkimVerified: true
          id: 1
          dkimConfig: "dkimConfig"
          track:
            textValue: "textValue"
            host: "host"
            type: "type"
          spfVerified: true
          trackVerified: true
        reverseDNSHostname: "reverseDNSHostname"
        infraMonitor: true
        autoWarmupEnabled: true
        ipDomainWarmupStatus:
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        mailruSettings: "mailruSettings"
        aolSettings: "aolSettings"
        id: 7
        yandexSettings: "yandexSettings"
        infraClassification: "infraClassification"
        qqSettings: "qqSettings"
        defaultSettings: "defaultSettings"
        gmailSettings: "gmailSettings"
        microsoftSettings: "microsoftSettings"
      - yahooSettings: "yahooSettings"
        comcastSettings: "comcastSettings"
        created: 2
        icloudSettings: "icloudSettings"
        publicIP: "publicIP"
        type: {}
        zohoSettings: "zohoSettings"
        gmxSettings: "gmxSettings"
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        systemDomain:
          dkim:
            textValue: "textValue"
            host: "host"
            type: "type"
          mailboxVerified: true
          created: 1
          name: "name"
          spf:
            textValue: "textValue"
            host: "host"
            type: "type"
          dkimVerified: true
          id: 1
          dkimConfig: "dkimConfig"
          track:
            textValue: "textValue"
            host: "host"
            type: "type"
          spfVerified: true
          trackVerified: true
        reverseDNSHostname: "reverseDNSHostname"
        infraMonitor: true
        autoWarmupEnabled: true
        ipDomainWarmupStatus:
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        mailruSettings: "mailruSettings"
        aolSettings: "aolSettings"
        id: 7
        yandexSettings: "yandexSettings"
        infraClassification: "infraClassification"
        qqSettings: "qqSettings"
        defaultSettings: "defaultSettings"
        gmailSettings: "gmailSettings"
        microsoftSettings: "microsoftSettings"
  models.IPPoolType:
    type: "object"
  models.IPStat:
    type: "object"
    properties:
      clicked:
        type: "integer"
        format: "int64"
      day:
        type: "integer"
        format: "int64"
      delivered:
        type: "integer"
        format: "int64"
      dropped:
        type: "integer"
        format: "int64"
      hardBounced:
        type: "integer"
        format: "int64"
      month:
        type: "integer"
        format: "int64"
      opened:
        type: "integer"
        format: "int64"
      processed:
        type: "integer"
        format: "int64"
      sent:
        type: "integer"
        format: "int64"
      softBounced:
        type: "integer"
        format: "int64"
      spam:
        type: "integer"
        format: "int64"
      unsubscribed:
        type: "integer"
        format: "int64"
      year:
        type: "integer"
        format: "int64"
    title: "IPStat"
    example:
      hardBounced: 5
      year: 1
      dropped: 5
      delivered: 1
      opened: 7
      clicked: 0
      sent: 3
      processed: 9
      unsubscribed: 7
      month: 2
      softBounced: 2
      spam: 4
      day: 6
  models.IPType:
    type: "object"
  models.Incident:
    type: "object"
    properties:
      assignedTo:
        $ref: "#/definitions/models.Member"
      author:
        $ref: "#/definitions/models.Member"
      closed:
        type: "integer"
        format: "int64"
      created:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      relatedIP:
        $ref: "#/definitions/models.IP"
      relatedSubAccount:
        $ref: "#/definitions/models.SubAccount"
      status:
        $ref: "#/definitions/models.IncidentStatus"
      summary:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/models.Tag"
      updated:
        type: "integer"
        format: "int64"
    title: "Incident"
    example:
      summary: "summary"
      relatedSubAccount:
        apiKey: "apiKey"
        created: 1
        name: "name"
        id: 5
        type: {}
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        smtpAuths:
        - password: "password"
          created: 7
          id: 9
          updated: 3
          username: "username"
        - password: "password"
          created: 7
          id: 9
          updated: 3
          username: "username"
      author:
        phoneNumber: "phoneNumber"
        isForbidden: true
        isVerified: true
        created: 0
        companyName: "companyName"
        onboardQAnswered: true
        name: "name"
        id: 6
        email: "email"
        url: "url"
      created: 5
      closed: 1
      description: "description"
      id: 5
      relatedIP:
        yahooSettings: "yahooSettings"
        comcastSettings: "comcastSettings"
        created: 2
        icloudSettings: "icloudSettings"
        publicIP: "publicIP"
        type: {}
        zohoSettings: "zohoSettings"
        gmxSettings: "gmxSettings"
        labels:
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        - color: "color"
          created: 5
          name: "name"
          id: 2
          type: {}
        systemDomain:
          dkim:
            textValue: "textValue"
            host: "host"
            type: "type"
          mailboxVerified: true
          created: 1
          name: "name"
          spf:
            textValue: "textValue"
            host: "host"
            type: "type"
          dkimVerified: true
          id: 1
          dkimConfig: "dkimConfig"
          track:
            textValue: "textValue"
            host: "host"
            type: "type"
          spfVerified: true
          trackVerified: true
        reverseDNSHostname: "reverseDNSHostname"
        infraMonitor: true
        autoWarmupEnabled: true
        ipDomainWarmupStatus:
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        - autoWarmupLastRunAt: 3
          autoWarmupDelay: 9
          warmupCompleted: true
          created: 2
          id: 7
          currentWarmupStage: 4
          updated: 1
        mailruSettings: "mailruSettings"
        aolSettings: "aolSettings"
        id: 7
        yandexSettings: "yandexSettings"
        infraClassification: "infraClassification"
        qqSettings: "qqSettings"
        defaultSettings: "defaultSettings"
        gmailSettings: "gmailSettings"
        microsoftSettings: "microsoftSettings"
      updated: 4
      assignedTo:
        phoneNumber: "phoneNumber"
        isForbidden: true
        isVerified: true
        created: 0
        companyName: "companyName"
        onboardQAnswered: true
        name: "name"
        id: 6
        email: "email"
        url: "url"
      status: {}
      tags:
      - color: "color"
        created: 6
        name: "name"
        description: "description"
        id: 7
        updated: 1
      - color: "color"
        created: 6
        name: "name"
        description: "description"
        id: 7
        updated: 1
  models.IncidentStatus:
    type: "integer"
  models.Instance:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      endpoint:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      ips:
        type: "array"
        items:
          $ref: "#/definitions/models.IP"
      name:
        type: "string"
    title: "Instance"
  models.Integration:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
      settings:
        type: "string"
      type:
        $ref: "#/definitions/models.IntegrationType"
    title: "Integration"
    example:
      settings: "settings"
      created: 0
      id: 6
      type: {}
      key: "key"
  models.IntegrationSettings:
    type: "object"
    properties:
      autoEnableMonitoring:
        type: "boolean"
      emailTo:
        type: "array"
        items:
          type: "string"
      frequency:
        $ref: "#/definitions/models.FrequencyType"
      receiveReports:
        type: "boolean"
    title: "IntegrationSettings"
  models.IntegrationType:
    type: "string"
  models.Invitation:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
      Role:
        $ref: "#/definitions/models.MemberRole"
      Status:
        $ref: "#/definitions/models.InvitationStatus"
      ToEmail:
        type: "string"
      created:
        type: "integer"
        format: "int64"
    title: "Invitation"
    example:
      Role: {}
      Status: {}
      ToEmail: "ToEmail"
      created: 6
      Id: 0
  models.InvitationStatus:
    type: "object"
  models.Label:
    type: "object"
    properties:
      color:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      type:
        $ref: "#/definitions/models.LabelType"
    title: "Label"
    example:
      color: "color"
      created: 5
      name: "name"
      id: 2
      type: {}
  models.LabelType:
    type: "object"
  models.MailReportResult:
    type: "object"
    properties:
      body:
        type: "string"
      header:
        type: "string"
      seedList: {}
      testId:
        type: "integer"
        format: "int64"
    title: "MailReportResult"
    example:
      seedList: ""
      header: "header"
      testId: 0
      body: "body"
  models.Member:
    type: "object"
    properties:
      companyName:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      isForbidden:
        type: "boolean"
      isVerified:
        type: "boolean"
      name:
        type: "string"
      onboardQAnswered:
        type: "boolean"
      phoneNumber:
        type: "string"
      url:
        type: "string"
    title: "Member"
    example:
      phoneNumber: "phoneNumber"
      isForbidden: true
      isVerified: true
      created: 0
      companyName: "companyName"
      onboardQAnswered: true
      name: "name"
      id: 6
      email: "email"
      url: "url"
  models.MemberRole:
    type: "object"
  models.NotificationType:
    type: "object"
  models.OnboardingChecklist:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      isDomainAdded:
        type: "boolean"
      isDomainVerified:
        type: "boolean"
      isFirstEmailSent:
        type: "boolean"
    title: "OnboardingChecklist"
    example:
      isFirstEmailSent: true
      id: 0
      isDomainAdded: true
      isDomainVerified: true
  models.PIPStat:
    type: "object"
    properties:
      name:
        type: "string"
      stat:
        $ref: "#/definitions/models.IPStat"
    title: "PIPStat"
    example:
      stat:
        hardBounced: 5
        year: 1
        dropped: 5
        delivered: 1
        opened: 7
        clicked: 0
        sent: 3
        processed: 9
        unsubscribed: 7
        month: 2
        softBounced: 2
        spam: 4
        day: 6
      name: "name"
  models.PaymentOptions:
    type: "object"
    properties:
      customerId:
        type: "string"
      ipCount:
        type: "integer"
        format: "int64"
      paymentMethodId:
        type: "string"
      priceId:
        type: "string"
    title: "PaymentOptions"
  models.PaymentStatus:
    type: "object"
    properties:
      status:
        type: "string"
    title: "PaymentStatus"
    example:
      status: "status"
  models.Provider:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      endpoint:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      key:
        type: "string"
      name:
        type: "string"
      port:
        type: "integer"
        format: "int64"
      provider:
        $ref: "#/definitions/models.ProviderType"
      retry_time:
        type: "integer"
        format: "int64"
      secret:
        type: "string"
      token:
        type: "string"
      updated:
        type: "integer"
        format: "int64"
    title: "Provider"
  models.ProviderResult:
    type: "object"
    properties:
      providers:
        type: "array"
        items:
          $ref: "#/definitions/models.ReportProvider"
    title: "ProviderResult"
    example:
      providers:
      - name: "name"
        id: 0
      - name: "name"
        id: 0
  models.ProviderSettings:
    type: "object"
    properties:
      backOffConfiguration:
        $ref: "#/definitions/models.BackOffConfiguration"
      backOffTrigger:
        $ref: "#/definitions/models.BackOffTrigger"
      maxConcurrentConnections:
        type: "integer"
        format: "int64"
      maxSendPerDay:
        type: "integer"
        format: "int64"
      maxSendPerHour:
        type: "integer"
        format: "int64"
      maxSendPerMinute:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    title: "ProviderSettings"
  models.ProviderType:
    type: "object"
  models.QEmailMessage:
    type: "object"
    properties:
      accountID:
        type: "integer"
        format: "int64"
      ampBody:
        type: "string"
      attempt:
        type: "integer"
        format: "int64"
      customFields: {}
      emailType:
        type: "string"
      from:
        $ref: "#/definitions/models.From"
      groups: {}
      headers: {}
      htmlBody:
        type: "string"
      ipID:
        type: "integer"
        format: "int64"
      ipPool:
        type: "string"
      localIP:
        type: "string"
      messageID:
        type: "string"
      preText:
        type: "string"
      publicIP:
        type: "string"
      replyTo:
        $ref: "#/definitions/models.ReplyTo"
      subAccountID:
        type: "integer"
        format: "int64"
      subject:
        type: "string"
      submittedAt:
        type: "integer"
        format: "int64"
      textBody:
        type: "string"
      to:
        $ref: "#/definitions/models.To"
      trackClicks:
        type: "boolean"
      trackOpens:
        type: "boolean"
    title: "QEmailMessage"
    example:
      ampBody: "ampBody"
      headers: ""
      trackOpens: true
      customFields: ""
      subject: "subject"
      groups: ""
      messageID: "messageID"
      preText: "preText"
      publicIP: "publicIP"
      textBody: "textBody"
      attempt: 6
      accountID: 0
      htmlBody: "htmlBody"
      ipID: 1
      subAccountID: 5
      emailType: "emailType"
      replyTo:
        name: "name"
        email: "email"
      localIP: "localIP"
      from:
        name: "name"
        email: "email"
      to:
        customFields: ""
        name: "name"
        email: "email"
      submittedAt: 5
      trackClicks: true
      ipPool: "ipPool"
  models.QEvent:
    type: "object"
    properties:
      accountID:
        type: "integer"
        format: "int64"
      eventID:
        type: "string"
      eventMetadata:
        $ref: "#/definitions/models.EventMetadata"
      from:
        type: "string"
      groups: {}
      ipID:
        type: "integer"
        format: "int64"
      messageID:
        type: "string"
      messageType:
        type: "string"
      subAccountID:
        type: "integer"
        format: "int64"
      submittedAt:
        type: "integer"
        format: "int64"
      to:
        type: "string"
      type:
        type: "integer"
        format: "int64"
    title: "QEvent"
    example:
      accountID: 0
      eventID: "eventID"
      ipID: 5
      messageType: "messageType"
      subAccountID: 5
      groups: ""
      messageID: "messageID"
      from: "from"
      to: "to"
      submittedAt: 2
      type: 7
      eventMetadata:
        geo:
          countryCode: "countryCode"
          postalCode: "postalCode"
          timeZone: "timeZone"
          cityID: 6
          continentCode: "continentCode"
        smtpDescription: "smtpDescription"
        os:
          Major: "Major"
          PatchMinor: "PatchMinor"
          Family: "Family"
          Minor: "Minor"
          Patch: "Patch"
        clickedURL: "clickedURL"
        smtpCode: 1
        userAgent:
          Major: "Major"
          Family: "Family"
          Minor: "Minor"
          Patch: "Patch"
        device:
          Family: "Family"
  models.RDSuppression:
    type: "object"
    properties:
      suppressions:
        type: "array"
        items:
          $ref: "#/definitions/models.SuppressionEmail"
    title: "RDSuppression"
  models.RGlockappsMonitorStat:
    type: "object"
    properties:
      date:
        type: "string"
      stat:
        $ref: "#/definitions/models.GlockappsMonitorStat"
    title: "RGlockappsMonitorStat"
    example:
      date: "date"
      stat:
        month: 1
        year: 5
        senderScore: 5
        day: 0
        listedCount: 6
        listedIn:
        - server: "server"
          txt: "txt"
          status: {}
        - server: "server"
          txt: "txt"
          status: {}
  models.RIPStat:
    type: "object"
    properties:
      date:
        type: "string"
      stat:
        $ref: "#/definitions/models.IPStat"
    title: "RIPStat"
    example:
      date: "date"
      stat:
        hardBounced: 5
        year: 1
        dropped: 5
        delivered: 1
        opened: 7
        clicked: 0
        sent: 3
        processed: 9
        unsubscribed: 7
        month: 2
        softBounced: 2
        spam: 4
        day: 6
  models.RStat:
    type: "object"
    properties:
      date:
        type: "string"
      stat:
        $ref: "#/definitions/models.Stat"
    title: "RStat"
    example:
      date: "date"
      stat:
        processed: 2
        unsubscribed: 2
        hardBounced: 5
        dropped: 1
        softBounced: 9
        delivered: 6
        opened: 5
        spam: 3
        clicked: 0
        sent: 7
  models.RSuppression:
    type: "object"
    properties:
      hardBounce:
        type: "array"
        items:
          $ref: "#/definitions/models.SuppressionEmail"
      manual:
        type: "array"
        items:
          $ref: "#/definitions/models.SuppressionEmail"
      spamComplaint:
        type: "array"
        items:
          $ref: "#/definitions/models.SuppressionEmail"
      unsubscribe:
        type: "array"
        items:
          $ref: "#/definitions/models.SuppressionEmail"
    title: "RSuppression"
  models.ReplyTo:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
    title: "ReplyTo"
    example:
      name: "name"
      email: "email"
  models.ReportProvider:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    title: "ReportProvider"
    example:
      name: "name"
      id: 0
  models.Response:
    type: "object"
    properties:
      message:
        type: "string"
      status:
        type: "string"
    title: "Response"
    example:
      message: "message"
      status: "status"
  models.SIPStat:
    type: "object"
    properties:
      name:
        type: "string"
      sid:
        type: "integer"
        format: "int64"
      stat:
        $ref: "#/definitions/models.IPStat"
    title: "SIPStat"
    example:
      stat:
        hardBounced: 5
        year: 1
        dropped: 5
        delivered: 1
        opened: 7
        clicked: 0
        sent: 3
        processed: 9
        unsubscribed: 7
        month: 2
        softBounced: 2
        spam: 4
        day: 6
      name: "name"
      sid: 0
  models.SMTPAuth:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      password:
        type: "string"
      updated:
        type: "integer"
        format: "int64"
      username:
        type: "string"
    title: "SMTPAuth"
    example:
      password: "password"
      created: 7
      id: 9
      updated: 3
      username: "username"
  models.SMTPStat:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int64"
      smtpCode:
        type: "integer"
        format: "int64"
      smtpDescription:
        type: "string"
    title: "SMTPStat"
    example:
      smtpDescription: "smtpDescription"
      count: 0
      smtpCode: 6
  models.SSLCertificate:
    type: "object"
    properties:
      details:
        $ref: "#/definitions/models.CertificateDetails"
      fingerprint:
        type: "string"
      found:
        type: "boolean"
      nameMatch:
        type: "boolean"
      validPeer:
        type: "boolean"
    title: "SSLCertificate"
    example:
      found: true
      fingerprint: "fingerprint"
      details:
        extensions:
          authorityKeyIdentifier: "authorityKeyIdentifier"
          keyUsage: "keyUsage"
          authorityInfoAccess: "authorityInfoAccess"
          certificatePolicies: "certificatePolicies"
          basicConstraints: "basicConstraints"
          extendedKeyUsage: "extendedKeyUsage"
          subjectKeyIdentifier: "subjectKeyIdentifier"
          crlDistributionPoints: "crlDistributionPoints"
        signature:
          serial: "serial"
          serialHex: "serialHex"
          type: "type"
        subject:
          alternativeNames: "alternativeNames"
          commonName: "commonName"
          name: "name"
        validity:
          daysLeft: 5
          validFrom: "validFrom"
          validFromTimestamp: 2
          validTo: "validTo"
          validToTimestamp: 7
        issuer:
          commonName: "commonName"
          country: "country"
          organization: "organization"
          organizationUnit: "organizationUnit"
      validPeer: true
      nameMatch: true
  models.SSLInfo:
    type: "object"
    properties:
      certificate:
        $ref: "#/definitions/models.SSLCertificate"
    title: "SSLInfo"
    example:
      certificate:
        found: true
        fingerprint: "fingerprint"
        details:
          extensions:
            authorityKeyIdentifier: "authorityKeyIdentifier"
            keyUsage: "keyUsage"
            authorityInfoAccess: "authorityInfoAccess"
            certificatePolicies: "certificatePolicies"
            basicConstraints: "basicConstraints"
            extendedKeyUsage: "extendedKeyUsage"
            subjectKeyIdentifier: "subjectKeyIdentifier"
            crlDistributionPoints: "crlDistributionPoints"
          signature:
            serial: "serial"
            serialHex: "serialHex"
            type: "type"
          subject:
            alternativeNames: "alternativeNames"
            commonName: "commonName"
            name: "name"
          validity:
            daysLeft: 5
            validFrom: "validFrom"
            validFromTimestamp: 2
            validTo: "validTo"
            validToTimestamp: 7
          issuer:
            commonName: "commonName"
            country: "country"
            organization: "organization"
            organizationUnit: "organizationUnit"
        validPeer: true
        nameMatch: true
  models.Sender:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      domain:
        type: "string"
      fromEmail:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      replyToEmail:
        type: "string"
      verified:
        type: "boolean"
    title: "Sender"
    example:
      created: 0
      domain: "domain"
      name: "name"
      verified: true
      id: 6
      replyToEmail: "replyToEmail"
      fromEmail: "fromEmail"
  models.SingleCleanedMail:
    type: "object"
    properties:
      email:
        type: "string"
      error:
        type: "string"
      reason:
        $ref: "#/definitions/models.ValidationReason"
      valid:
        type: "boolean"
    title: "SingleCleanedMail"
    example:
      valid: true
      reason: {}
      error: "error"
      email: "email"
  models.Stat:
    type: "object"
    properties:
      clicked:
        type: "integer"
        format: "int64"
      delivered:
        type: "integer"
        format: "int64"
      dropped:
        type: "integer"
        format: "int64"
      hardBounced:
        type: "integer"
        format: "int64"
      opened:
        type: "integer"
        format: "int64"
      processed:
        type: "integer"
        format: "int64"
      sent:
        type: "integer"
        format: "int64"
      softBounced:
        type: "integer"
        format: "int64"
      spam:
        type: "integer"
        format: "int64"
      unsubscribed:
        type: "integer"
        format: "int64"
    title: "Stat"
    example:
      processed: 2
      unsubscribed: 2
      hardBounced: 5
      dropped: 1
      softBounced: 9
      delivered: 6
      opened: 5
      spam: 3
      clicked: 0
      sent: 7
  models.SubAccount:
    type: "object"
    properties:
      apiKey:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      labels:
        type: "array"
        items:
          $ref: "#/definitions/models.Label"
      name:
        type: "string"
      smtpAuths:
        type: "array"
        items:
          $ref: "#/definitions/models.SMTPAuth"
      type:
        $ref: "#/definitions/models.SubAccountType"
    title: "SubAccount"
    example:
      apiKey: "apiKey"
      created: 1
      name: "name"
      id: 5
      type: {}
      labels:
      - color: "color"
        created: 5
        name: "name"
        id: 2
        type: {}
      - color: "color"
        created: 5
        name: "name"
        id: 2
        type: {}
      smtpAuths:
      - password: "password"
        created: 7
        id: 9
        updated: 3
        username: "username"
      - password: "password"
        created: 7
        id: 9
        updated: 3
        username: "username"
  models.SubAccountType:
    type: "object"
  models.Suppression:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      reason:
        $ref: "#/definitions/models.SuppressionReason"
      smtp_error:
        type: "string"
    title: "Suppression"
    example:
      reason: {}
      created: 0
      id: 6
      smtp_error: "smtp_error"
      email: "email"
  models.SuppressionEmail:
    type: "object"
    properties:
      email:
        type: "string"
    title: "SuppressionEmail"
  models.SuppressionReason:
    type: "integer"
  models.SystemDNSRecord:
    type: "object"
    properties:
      host:
        type: "string"
      textValue:
        type: "string"
      type:
        type: "string"
    title: "SystemDNSRecord"
    example:
      textValue: "textValue"
      host: "host"
      type: "type"
  models.SystemDomain:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      dkim:
        $ref: "#/definitions/models.SystemDNSRecord"
      dkimConfig:
        type: "string"
      dkimVerified:
        type: "boolean"
      id:
        type: "integer"
        format: "int64"
      mailboxVerified:
        type: "boolean"
      name:
        type: "string"
      spf:
        $ref: "#/definitions/models.SystemDNSRecord"
      spfVerified:
        type: "boolean"
      track:
        $ref: "#/definitions/models.SystemDNSRecord"
      trackVerified:
        type: "boolean"
    title: "SystemDomain"
    example:
      dkim:
        textValue: "textValue"
        host: "host"
        type: "type"
      mailboxVerified: true
      created: 1
      name: "name"
      spf:
        textValue: "textValue"
        host: "host"
        type: "type"
      dkimVerified: true
      id: 1
      dkimConfig: "dkimConfig"
      track:
        textValue: "textValue"
        host: "host"
        type: "type"
      spfVerified: true
      trackVerified: true
  models.SystemIPPool:
    type: "object"
    properties:
      IPs:
        type: "array"
        items:
          $ref: "#/definitions/models.IP"
      created:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    title: "SystemIPPool"
  models.SystemTemplate:
    type: "object"
    properties:
      html:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      template:
        type: "string"
      text:
        type: "string"
    title: "SystemTemplate"
    example:
      template: "template"
      name: "name"
      html: "html"
      id: 0
      text: "text"
  models.Tag:
    type: "object"
    properties:
      color:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      updated:
        type: "integer"
        format: "int64"
    title: "Tag"
    example:
      color: "color"
      created: 6
      name: "name"
      description: "description"
      id: 7
      updated: 1
  models.To:
    type: "object"
    properties:
      customFields: {}
      email:
        type: "string"
      name:
        type: "string"
    title: "To"
    example:
      customFields: ""
      name: "name"
      email: "email"
  models.Validation:
    type: "object"
    properties:
      created:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      error:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      reason:
        $ref: "#/definitions/models.ValidationReason"
    title: "Validation"
    example:
      reason: {}
      created: 0
      id: 6
      error: "error"
      email: "email"
  models.ValidationReason:
    type: "integer"
  models.VerifyByMemberTokenRequest:
    type: "object"
    properties:
      email:
        type: "string"
    title: "VerifyByMemberTokenRequest"
  models.VerifyByTokenRequest:
    type: "object"
    properties:
      email:
        type: "string"
    title: "VerifyByTokenRequest"
  models.WMessage:
    type: "object"
    properties:
      AccountID:
        type: "integer"
        format: "int64"
      From:
        type: "string"
      Groups: {}
      IPID:
        type: "integer"
        format: "int64"
      MessageType:
        type: "string"
      MessageUUID:
        type: "string"
      MockMessage:
        type: "boolean"
      MockTimeShift:
        type: "integer"
        format: "int64"
      SMTPCode:
        type: "integer"
        format: "int64"
      SMTPDescription:
        type: "string"
      SubAccountID:
        type: "integer"
        format: "int64"
      SubmittedAt:
        type: "integer"
        format: "int64"
      To:
        type: "string"
      Type:
        $ref: "#/definitions/models.EventType"
    title: "WMessage"
  uaparser.Device:
    type: "object"
    properties:
      Family:
        type: "string"
    title: "Device"
    example:
      Family: "Family"
  uaparser.Os:
    type: "object"
    properties:
      Family:
        type: "string"
      Major:
        type: "string"
      Minor:
        type: "string"
      Patch:
        type: "string"
      PatchMinor:
        type: "string"
    title: "Os"
    example:
      Major: "Major"
      PatchMinor: "PatchMinor"
      Family: "Family"
      Minor: "Minor"
      Patch: "Patch"
  uaparser.UserAgent:
    type: "object"
    properties:
      Family:
        type: "string"
      Major:
        type: "string"
      Minor:
        type: "string"
      Patch:
        type: "string"
    title: "UserAgent"
    example:
      Major: "Major"
      Family: "Family"
      Minor: "Minor"
      Patch: "Patch"
